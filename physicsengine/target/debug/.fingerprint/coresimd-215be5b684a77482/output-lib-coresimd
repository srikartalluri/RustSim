{"$message_type":"diagnostic","message":"feature has been removed","code":{"code":"E0557","explanation":"A feature attribute named a feature that has been removed.\n\nErroneous code example:\n\n```compile_fail,E0557\n#![feature(managed_boxes)] // error: feature has been removed\n```\n\nDelete the offending feature attribute.\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/lib.rs","byte_start":408,"byte_end":416,"line_start":13,"line_end":13,"column_start":5,"column_end":13,"is_primary":true,"text":[{"text":"    const_fn,","highlight_start":5,"highlight_end":13}],"label":"feature has been removed","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"split into finer-grained feature gates","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0557]\u001b[0m\u001b[0m\u001b[1m: feature has been removed\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/lib.rs:13:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    const_fn,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfeature has been removed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: split into finer-grained feature gates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"feature has been removed","code":{"code":"E0557","explanation":"A feature attribute named a feature that has been removed.\n\nErroneous code example:\n\n```compile_fail,E0557\n#![feature(managed_boxes)] // error: feature has been removed\n```\n\nDelete the offending feature attribute.\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/lib.rs","byte_start":468,"byte_end":487,"line_start":16,"line_end":16,"column_start":5,"column_end":24,"is_primary":true,"text":[{"text":"    platform_intrinsics,","highlight_start":5,"highlight_end":24}],"label":"feature has been removed","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"SIMD intrinsics use the regular intrinsics ABI now","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0557]\u001b[0m\u001b[0m\u001b[1m: feature has been removed\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/lib.rs:16:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    platform_intrinsics,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfeature has been removed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: SIMD intrinsics use the regular intrinsics ABI now\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2159,"byte_end":2194,"line_start":77,"line_end":77,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"simd_ty!(u8x2[u8]: u8, u8 | x0, x1);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(u8x2[u8]: u8, u8 | x0, x1);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2196,"byte_end":2231,"line_start":78,"line_end":78,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"simd_ty!(i8x2[i8]: i8, i8 | x0, x1);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m78\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(i8x2[i8]: i8, i8 | x0, x1);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2257,"byte_end":2308,"line_start":82,"line_end":82,"column_start":1,"column_end":52,"is_primary":false,"text":[{"text":"simd_ty!(u8x4[u8]: u8, u8, u8, u8 | x0, x1, x2, x3);","highlight_start":1,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(u8x4[u8]: u8, u8, u8, u8 | x0, x1, x2, x3);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2310,"byte_end":2349,"line_start":83,"line_end":83,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"simd_ty!(u16x2[u16]: u16, u16 | x0, x1);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(u16x2[u16]: u16, u16 | x0, x1);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2352,"byte_end":2403,"line_start":85,"line_end":85,"column_start":1,"column_end":52,"is_primary":false,"text":[{"text":"simd_ty!(i8x4[i8]: i8, i8, i8, i8 | x0, x1, x2, x3);","highlight_start":1,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m85\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(i8x4[i8]: i8, i8, i8, i8 | x0, x1, x2, x3);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2405,"byte_end":2444,"line_start":86,"line_end":86,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"simd_ty!(i16x2[i16]: i16, i16 | x0, x1);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(i16x2[i16]: i16, i16 | x0, x1);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2470,"byte_end":2571,"line_start":90,"line_end":92,"column_start":1,"column_end":43,"is_primary":false,"text":[{"text":"simd_ty!(u8x8[u8]:","highlight_start":1,"highlight_end":19},{"text":"         u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":40},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7);","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(u8x8[u8]:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         u8, u8, u8, u8, u8, u8, u8, u8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         | x0, x1, x2, x3, x4, x5, x6, x7);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2573,"byte_end":2630,"line_start":93,"line_end":93,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"simd_ty!(u16x4[u16]: u16, u16, u16, u16 | x0, x1, x2, x3);","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(u16x4[u16]: u16, u16, u16, u16 | x0, x1, x2, x3);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2632,"byte_end":2671,"line_start":94,"line_end":94,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"simd_ty!(u32x2[u32]: u32, u32 | x0, x1);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(u32x2[u32]: u32, u32 | x0, x1);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2673,"byte_end":2703,"line_start":95,"line_end":95,"column_start":1,"column_end":31,"is_primary":false,"text":[{"text":"simd_ty!(u64x1[u64]: u64 | x1);","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(u64x1[u64]: u64 | x1);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2706,"byte_end":2807,"line_start":97,"line_end":99,"column_start":1,"column_end":43,"is_primary":false,"text":[{"text":"simd_ty!(i8x8[i8]:","highlight_start":1,"highlight_end":19},{"text":"         i8, i8, i8, i8, i8, i8, i8, i8","highlight_start":1,"highlight_end":40},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7);","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m97\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(i8x8[i8]:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m98\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         i8, i8, i8, i8, i8, i8, i8, i8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         | x0, x1, x2, x3, x4, x5, x6, x7);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2809,"byte_end":2866,"line_start":100,"line_end":100,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"simd_ty!(i16x4[i16]: i16, i16, i16, i16 | x0, x1, x2, x3);","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(i16x4[i16]: i16, i16, i16, i16 | x0, x1, x2, x3);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2868,"byte_end":2907,"line_start":101,"line_end":101,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"simd_ty!(i32x2[i32]: i32, i32 | x0, x1);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(i32x2[i32]: i32, i32 | x0, x1);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2909,"byte_end":2939,"line_start":102,"line_end":102,"column_start":1,"column_end":31,"is_primary":false,"text":[{"text":"simd_ty!(i64x1[i64]: i64 | x1);","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(i64x1[i64]: i64 | x1);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2942,"byte_end":2981,"line_start":104,"line_end":104,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"simd_ty!(f32x2[f32]: f32, f32 | x0, x1);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(f32x2[f32]: f32, f32 | x0, x1);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3008,"byte_end":3190,"line_start":108,"line_end":112,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"simd_ty!(u8x16[u8]:","highlight_start":1,"highlight_end":20},{"text":"         u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":41},{"text":"         u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":40},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15","highlight_start":1,"highlight_end":80},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m108\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(u8x16[u8]:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         u8, u8, u8, u8, u8, u8, u8, u8,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         u8, u8, u8, u8, u8, u8, u8, u8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         | x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3192,"byte_end":3303,"line_start":113,"line_end":115,"column_start":1,"column_end":43,"is_primary":false,"text":[{"text":"simd_ty!(u16x8[u16]:","highlight_start":1,"highlight_end":21},{"text":"         u16, u16, u16, u16, u16, u16, u16, u16","highlight_start":1,"highlight_end":48},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7);","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(u16x8[u16]:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         u16, u16, u16, u16, u16, u16, u16, u16\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         | x0, x1, x2, x3, x4, x5, x6, x7);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3305,"byte_end":3362,"line_start":116,"line_end":116,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"simd_ty!(u32x4[u32]: u32, u32, u32, u32 | x0, x1, x2, x3);","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(u32x4[u32]: u32, u32, u32, u32 | x0, x1, x2, x3);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3364,"byte_end":3403,"line_start":117,"line_end":117,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"simd_ty!(u64x2[u64]: u64, u64 | x0, x1);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(u64x2[u64]: u64, u64 | x0, x1);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3406,"byte_end":3588,"line_start":119,"line_end":123,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"simd_ty!(i8x16[i8]:","highlight_start":1,"highlight_end":20},{"text":"         i8, i8, i8, i8, i8, i8, i8, i8,","highlight_start":1,"highlight_end":41},{"text":"         i8, i8, i8, i8, i8, i8, i8, i8","highlight_start":1,"highlight_end":40},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15","highlight_start":1,"highlight_end":80},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(i8x16[i8]:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         i8, i8, i8, i8, i8, i8, i8, i8,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         i8, i8, i8, i8, i8, i8, i8, i8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         | x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3590,"byte_end":3701,"line_start":124,"line_end":126,"column_start":1,"column_end":43,"is_primary":false,"text":[{"text":"simd_ty!(i16x8[i16]:","highlight_start":1,"highlight_end":21},{"text":"         i16, i16, i16, i16, i16, i16, i16, i16","highlight_start":1,"highlight_end":48},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7);","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(i16x8[i16]:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         i16, i16, i16, i16, i16, i16, i16, i16\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m126\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         | x0, x1, x2, x3, x4, x5, x6, x7);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3703,"byte_end":3760,"line_start":127,"line_end":127,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"simd_ty!(i32x4[i32]: i32, i32, i32, i32 | x0, x1, x2, x3);","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(i32x4[i32]: i32, i32, i32, i32 | x0, x1, x2, x3);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3762,"byte_end":3801,"line_start":128,"line_end":128,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"simd_ty!(i64x2[i64]: i64, i64 | x0, x1);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(i64x2[i64]: i64, i64 | x0, x1);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3804,"byte_end":3861,"line_start":130,"line_end":130,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"simd_ty!(f32x4[f32]: f32, f32, f32, f32 | x0, x1, x2, x3);","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(f32x4[f32]: f32, f32, f32, f32 | x0, x1, x2, x3);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3863,"byte_end":3902,"line_start":131,"line_end":131,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"simd_ty!(f64x2[f64]: f64, f64 | x0, x1);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m131\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(f64x2[f64]: f64, f64 | x0, x1);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":1141,"byte_end":1147,"line_start":41,"line_end":41,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3905,"byte_end":4095,"line_start":133,"line_end":137,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"simd_m_ty!(m8x16[i8]:","highlight_start":1,"highlight_end":22},{"text":"           i8, i8, i8, i8, i8, i8, i8, i8,","highlight_start":1,"highlight_end":43},{"text":"           i8, i8, i8, i8, i8, i8, i8, i8","highlight_start":1,"highlight_end":42},{"text":"           | x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15","highlight_start":1,"highlight_end":82},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_m_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":1005,"byte_end":1027,"line_start":38,"line_end":38,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"macro_rules! simd_m_ty {","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:41:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m133\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_m_ty!(m8x16[i8]:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m           i8, i8, i8, i8, i8, i8, i8, i8,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m135\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m           i8, i8, i8, i8, i8, i8, i8, i8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m136\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m           | x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m137\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_m_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":1141,"byte_end":1147,"line_start":41,"line_end":41,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":4097,"byte_end":4214,"line_start":138,"line_end":140,"column_start":1,"column_end":45,"is_primary":false,"text":[{"text":"simd_m_ty!(m16x8[i16]:","highlight_start":1,"highlight_end":23},{"text":"           i16, i16, i16, i16, i16, i16, i16, i16","highlight_start":1,"highlight_end":50},{"text":"           | x0, x1, x2, x3, x4, x5, x6, x7);","highlight_start":1,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_m_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":1005,"byte_end":1027,"line_start":38,"line_end":38,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"macro_rules! simd_m_ty {","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:41:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_m_ty!(m16x8[i16]:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m           i16, i16, i16, i16, i16, i16, i16, i16\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m140\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m           | x0, x1, x2, x3, x4, x5, x6, x7);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|____________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_m_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":1141,"byte_end":1147,"line_start":41,"line_end":41,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":4216,"byte_end":4275,"line_start":141,"line_end":141,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"simd_m_ty!(m32x4[i32]: i32, i32, i32, i32 | x0, x1, x2, x3);","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_m_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":1005,"byte_end":1027,"line_start":38,"line_end":38,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"macro_rules! simd_m_ty {","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:41:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m141\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_m_ty!(m32x4[i32]: i32, i32, i32, i32 | x0, x1, x2, x3);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_m_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":1141,"byte_end":1147,"line_start":41,"line_end":41,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":4277,"byte_end":4318,"line_start":142,"line_end":142,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"simd_m_ty!(m64x2[i64]: i64, i64 | x0, x1);","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_m_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":1005,"byte_end":1027,"line_start":38,"line_end":38,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"macro_rules! simd_m_ty {","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:41:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_m_ty!(m64x2[i64]: i64, i64 | x0, x1);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_m_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":4345,"byte_end":4716,"line_start":146,"line_end":155,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"simd_ty!(u8x32[u8]:","highlight_start":1,"highlight_end":20},{"text":"         u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":41},{"text":"         u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":41},{"text":"         u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":41},{"text":"         u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":40},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7,","highlight_start":1,"highlight_end":43},{"text":"         x8, x9, x10, x11, x12, x13, x14, x15,","highlight_start":1,"highlight_end":47},{"text":"         x16, x17, x18, x19, x20, x21, x22, x23,","highlight_start":1,"highlight_end":49},{"text":"         x24, x25, x26, x27, x28, x29, x30, x31","highlight_start":1,"highlight_end":48},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(u8x32[u8]:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         u8, u8, u8, u8, u8, u8, u8, u8,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m148\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         u8, u8, u8, u8, u8, u8, u8, u8,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         u8, u8, u8, u8, u8, u8, u8, u8,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m154\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         x24, x25, x26, x27, x28, x29, x30, x31\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":4718,"byte_end":4918,"line_start":156,"line_end":160,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"simd_ty!(u16x16[u16]:","highlight_start":1,"highlight_end":22},{"text":"         u16, u16, u16, u16, u16, u16, u16, u16,","highlight_start":1,"highlight_end":49},{"text":"         u16, u16, u16, u16, u16, u16, u16, u16","highlight_start":1,"highlight_end":48},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15","highlight_start":1,"highlight_end":80},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(u16x16[u16]:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m157\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         u16, u16, u16, u16, u16, u16, u16, u16,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         u16, u16, u16, u16, u16, u16, u16, u16\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m159\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         | x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m160\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":4920,"byte_end":5031,"line_start":161,"line_end":163,"column_start":1,"column_end":43,"is_primary":false,"text":[{"text":"simd_ty!(u32x8[u32]:","highlight_start":1,"highlight_end":21},{"text":"         u32, u32, u32, u32, u32, u32, u32, u32","highlight_start":1,"highlight_end":48},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7);","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(u32x8[u32]:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         u32, u32, u32, u32, u32, u32, u32, u32\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         | x0, x1, x2, x3, x4, x5, x6, x7);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":5033,"byte_end":5090,"line_start":164,"line_end":164,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"simd_ty!(u64x4[u64]: u64, u64, u64, u64 | x0, x1, x2, x3);","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(u64x4[u64]: u64, u64, u64, u64 | x0, x1, x2, x3);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":5093,"byte_end":5464,"line_start":166,"line_end":175,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"simd_ty!(i8x32[i8]:","highlight_start":1,"highlight_end":20},{"text":"         i8, i8, i8, i8, i8, i8, i8, i8,","highlight_start":1,"highlight_end":41},{"text":"         i8, i8, i8, i8, i8, i8, i8, i8,","highlight_start":1,"highlight_end":41},{"text":"         i8, i8, i8, i8, i8, i8, i8, i8,","highlight_start":1,"highlight_end":41},{"text":"         i8, i8, i8, i8, i8, i8, i8, i8","highlight_start":1,"highlight_end":40},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7,","highlight_start":1,"highlight_end":43},{"text":"         x8, x9, x10, x11, x12, x13, x14, x15,","highlight_start":1,"highlight_end":47},{"text":"         x16, x17, x18, x19, x20, x21, x22, x23,","highlight_start":1,"highlight_end":49},{"text":"         x24, x25, x26, x27, x28, x29, x30, x31","highlight_start":1,"highlight_end":48},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(i8x32[i8]:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m167\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         i8, i8, i8, i8, i8, i8, i8, i8,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         i8, i8, i8, i8, i8, i8, i8, i8,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         i8, i8, i8, i8, i8, i8, i8, i8,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         x24, x25, x26, x27, x28, x29, x30, x31\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":5466,"byte_end":5666,"line_start":176,"line_end":180,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"simd_ty!(i16x16[i16]:","highlight_start":1,"highlight_end":22},{"text":"         i16, i16, i16, i16, i16, i16, i16, i16,","highlight_start":1,"highlight_end":49},{"text":"         i16, i16, i16, i16, i16, i16, i16, i16","highlight_start":1,"highlight_end":48},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15","highlight_start":1,"highlight_end":80},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(i16x16[i16]:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         i16, i16, i16, i16, i16, i16, i16, i16,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         i16, i16, i16, i16, i16, i16, i16, i16\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m179\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         | x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m180\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":5668,"byte_end":5779,"line_start":181,"line_end":183,"column_start":1,"column_end":43,"is_primary":false,"text":[{"text":"simd_ty!(i32x8[i32]:","highlight_start":1,"highlight_end":21},{"text":"         i32, i32, i32, i32, i32, i32, i32, i32","highlight_start":1,"highlight_end":48},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7);","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m181\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(i32x8[i32]:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m182\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         i32, i32, i32, i32, i32, i32, i32, i32\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m183\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         | x0, x1, x2, x3, x4, x5, x6, x7);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":240,"byte_end":246,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug, PartialEq)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":5781,"byte_end":5838,"line_start":184,"line_end":184,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"simd_ty!(i64x4[i64]: i64, i64, i64, i64 | x0, x1, x2, x3);","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":106,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:10:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m184\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(i64x4[i64]: i64, i64, i64, i64 | x0, x1, x2, x3);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":185,"byte_end":191,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":192,"byte_end":653,"line_start":12,"line_end":21,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of one packed `f64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float64x1_t(f64); // FIXME: check this!","highlight_start":1,"highlight_end":55},{"text":"    /// ARM-specific 128-bit wide vector of two packed `f64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct float64x2_t(f64, f64);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `p64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct poly64x1_t(i64); // FIXME: check this!","highlight_start":1,"highlight_end":54},{"text":"    /// ARM-specific 64-bit wide vector of two packed `p64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct poly64x2_t(i64, i64); // FIXME: check this!","highlight_start":1,"highlight_end":59},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":96,"byte_end":96,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use coresimd::arm::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:10:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:12:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of one packed `f64`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct float64x1_t(f64); // FIXME: check this!\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 128-bit wide vector of two packed `f64`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct poly64x2_t(i64, i64); // FIXME: check this!\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:7:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":715,"byte_end":721,"line_start":24,"line_end":24,"column_start":3,"column_end":9,"is_primary":true,"text":[{"text":"#[derive(Copy, Clone)]","highlight_start":3,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":96,"byte_end":96,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use coresimd::arm::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:24:3\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Copy, Clone)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":852,"byte_end":858,"line_start":27,"line_end":27,"column_start":3,"column_end":9,"is_primary":true,"text":[{"text":"#[derive(Copy, Clone)]","highlight_start":3,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":96,"byte_end":96,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use coresimd::arm::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:27:3\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Copy, Clone)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":1003,"byte_end":1009,"line_start":30,"line_end":30,"column_start":3,"column_end":9,"is_primary":true,"text":[{"text":"#[derive(Copy, Clone)]","highlight_start":3,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":96,"byte_end":96,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use coresimd::arm::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:30:3\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Copy, Clone)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":1189,"byte_end":1195,"line_start":39,"line_end":39,"column_start":3,"column_end":9,"is_primary":true,"text":[{"text":"#[derive(Copy, Clone)]","highlight_start":3,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":96,"byte_end":96,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use coresimd::arm::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:39:3\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Copy, Clone)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":1330,"byte_end":1336,"line_start":42,"line_end":42,"column_start":3,"column_end":9,"is_primary":true,"text":[{"text":"#[derive(Copy, Clone)]","highlight_start":3,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":96,"byte_end":96,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use coresimd::arm::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:42:3\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Copy, Clone)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":1486,"byte_end":1492,"line_start":45,"line_end":45,"column_start":3,"column_end":9,"is_primary":true,"text":[{"text":"#[derive(Copy, Clone)]","highlight_start":3,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":96,"byte_end":96,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use coresimd::arm::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:45:3\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Copy, Clone)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":1677,"byte_end":1683,"line_start":54,"line_end":54,"column_start":3,"column_end":9,"is_primary":true,"text":[{"text":"#[derive(Copy, Clone)]","highlight_start":3,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":96,"byte_end":96,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use coresimd::arm::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:54:3\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Copy, Clone)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":1818,"byte_end":1824,"line_start":57,"line_end":57,"column_start":3,"column_end":9,"is_primary":true,"text":[{"text":"#[derive(Copy, Clone)]","highlight_start":3,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":96,"byte_end":96,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use coresimd::arm::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:57:3\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Copy, Clone)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":1974,"byte_end":1980,"line_start":60,"line_end":60,"column_start":3,"column_end":9,"is_primary":true,"text":[{"text":"#[derive(Copy, Clone)]","highlight_start":3,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":96,"byte_end":96,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use coresimd::arm::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:60:3\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Copy, Clone)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":185,"byte_end":191,"line_start":10,"line_end":10,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"        #[derive(Copy, Clone, Debug)]","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":27,"byte_end":27,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use coresimd::simd_llvm::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:10:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        #[derive(Copy, Clone, Debug)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:3:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":3057,"byte_end":3063,"line_start":69,"line_end":69,"column_start":3,"column_end":9,"is_primary":true,"text":[{"text":"#[derive(Copy, Clone)]","highlight_start":3,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":27,"byte_end":27,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use coresimd::simd_llvm::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:69:3\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Copy, Clone)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":3190,"byte_end":3196,"line_start":72,"line_end":72,"column_start":3,"column_end":9,"is_primary":true,"text":[{"text":"#[derive(Copy, Clone)]","highlight_start":3,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":27,"byte_end":27,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use coresimd::simd_llvm::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:72:3\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Copy, Clone)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":3336,"byte_end":3342,"line_start":75,"line_end":75,"column_start":3,"column_end":9,"is_primary":true,"text":[{"text":"#[derive(Copy, Clone)]","highlight_start":3,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":27,"byte_end":27,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use coresimd::simd_llvm::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:75:3\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Copy, Clone)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":3497,"byte_end":3503,"line_start":79,"line_end":79,"column_start":3,"column_end":9,"is_primary":true,"text":[{"text":"#[derive(Copy, Clone)]","highlight_start":3,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":27,"byte_end":27,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use coresimd::simd_llvm::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:79:3\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Copy, Clone)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":3634,"byte_end":3640,"line_start":82,"line_end":82,"column_start":3,"column_end":9,"is_primary":true,"text":[{"text":"#[derive(Copy, Clone)]","highlight_start":3,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":27,"byte_end":27,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use coresimd::simd_llvm::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:82:3\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Copy, Clone)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":3785,"byte_end":3791,"line_start":85,"line_end":85,"column_start":3,"column_end":9,"is_primary":true,"text":[{"text":"#[derive(Copy, Clone)]","highlight_start":3,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":27,"byte_end":27,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use coresimd::simd_llvm::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:85:3\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m85\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Copy, Clone)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":3970,"byte_end":3976,"line_start":94,"line_end":94,"column_start":3,"column_end":9,"is_primary":true,"text":[{"text":"#[derive(Copy, Clone)]","highlight_start":3,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":27,"byte_end":27,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use coresimd::simd_llvm::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:94:3\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Copy, Clone)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":4107,"byte_end":4113,"line_start":97,"line_end":97,"column_start":3,"column_end":9,"is_primary":true,"text":[{"text":"#[derive(Copy, Clone)]","highlight_start":3,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":27,"byte_end":27,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use coresimd::simd_llvm::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:97:3\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m97\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Copy, Clone)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":4258,"byte_end":4264,"line_start":100,"line_end":100,"column_start":3,"column_end":9,"is_primary":true,"text":[{"text":"#[derive(Copy, Clone)]","highlight_start":3,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":27,"byte_end":27,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use coresimd::simd_llvm::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use prelude::rust_2024::derive;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:100:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Copy, Clone)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use prelude::rust_2024::derive;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#![feature]` may not be used on the stable release channel","code":{"code":"E0554","explanation":"Feature attributes are only allowed on the nightly release channel. Stable or\nbeta compilers will not comply.\n\nErroneous code example:\n\n```ignore (depends on release channel)\n#![feature(lang_items)] // error: `#![feature]` may not be used on the\n                        //        stable release channel\n```\n\nIf you need the feature, make sure to use a nightly release of the compiler\n(but be warned that the feature may be removed or altered in the future).\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/lib.rs","byte_start":392,"byte_end":890,"line_start":12,"line_end":37,"column_start":1,"column_end":3,"is_primary":true,"text":[{"text":"#![feature(","highlight_start":1,"highlight_end":12},{"text":"    const_fn,","highlight_start":1,"highlight_end":14},{"text":"    const_fn_union,","highlight_start":1,"highlight_end":20},{"text":"    link_llvm_intrinsics,","highlight_start":1,"highlight_end":26},{"text":"    platform_intrinsics,","highlight_start":1,"highlight_end":25},{"text":"    repr_simd,","highlight_start":1,"highlight_end":15},{"text":"    simd_ffi,","highlight_start":1,"highlight_end":14},{"text":"    asm,","highlight_start":1,"highlight_end":9},{"text":"    proc_macro_hygiene,","highlight_start":1,"highlight_end":24},{"text":"    integer_atomics,","highlight_start":1,"highlight_end":21},{"text":"    stmt_expr_attributes,","highlight_start":1,"highlight_end":26},{"text":"    core_intrinsics,","highlight_start":1,"highlight_end":21},{"text":"    no_core,","highlight_start":1,"highlight_end":13},{"text":"    rustc_attrs,","highlight_start":1,"highlight_end":17},{"text":"    stdsimd,","highlight_start":1,"highlight_end":13},{"text":"    staged_api,","highlight_start":1,"highlight_end":16},{"text":"    align_offset,","highlight_start":1,"highlight_end":18},{"text":"    doc_cfg,","highlight_start":1,"highlight_end":13},{"text":"    mmx_target_feature,","highlight_start":1,"highlight_end":24},{"text":"    tbm_target_feature,","highlight_start":1,"highlight_end":24},{"text":"    sse4a_target_feature,","highlight_start":1,"highlight_end":26},{"text":"    arm_target_feature,","highlight_start":1,"highlight_end":24},{"text":"    aarch64_target_feature,","highlight_start":1,"highlight_end":28},{"text":"    mips_target_feature,","highlight_start":1,"highlight_end":25},{"text":"    powerpc_target_feature,","highlight_start":1,"highlight_end":28},{"text":")]","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the feature `aarch64_target_feature` has been stable since `1.61.0` and no longer requires an attribute to enable","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the feature `aarch64_target_feature` has been stable since `1.61.0` and no longer requires an attribute to enable","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0554]\u001b[0m\u001b[0m\u001b[1m: `#![feature]` may not be used on the stable release channel\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/lib.rs:12:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![feature(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    const_fn,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    const_fn_union,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    link_llvm_intrinsics,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    powerpc_target_feature,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|__^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the feature `aarch64_target_feature` has been stable since `1.61.0` and no longer requires an attribute to enable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the feature `aarch64_target_feature` has been stable since `1.61.0` and no longer requires an attribute to enable\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"invalid ABI: found `platform-intrinsic`","code":{"code":"E0703","explanation":"Invalid ABI (Application Binary Interface) used in the code.\n\nErroneous code example:\n\n```compile_fail,E0703\nextern \"invalid\" fn foo() {} // error!\n# fn main() {}\n```\n\nAt present few predefined ABI's (like Rust, C, system, etc.) can be\nused in Rust. Verify that the ABI is predefined. For example you can\nreplace the given ABI from 'Rust'.\n\n```\nextern \"Rust\" fn foo() {} // ok!\n# fn main() { }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":111,"byte_end":131,"line_start":5,"line_end":5,"column_start":8,"column_end":28,"is_primary":true,"text":[{"text":"extern \"platform-intrinsic\" {","highlight_start":8,"highlight_end":28}],"label":"invalid ABI","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"invoke `rustc --print=calling-conventions` for a full list of supported calling conventions","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0703]\u001b[0m\u001b[0m\u001b[1m: invalid ABI: found `platform-intrinsic`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:5:8\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mextern \"platform-intrinsic\" {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9minvalid ABI\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: invoke `rustc --print=calling-conventions` for a full list of supported calling conventions\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unknown feature `mmx_target_feature`","code":{"code":"E0635","explanation":"The `#![feature]` attribute specified an unknown feature.\n\nErroneous code example:\n\n```compile_fail,E0635\n#![feature(nonexistent_rust_feature)] // error: unknown feature\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/lib.rs","byte_start":713,"byte_end":731,"line_start":30,"line_end":30,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"    mmx_target_feature,","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0635]\u001b[0m\u001b[0m\u001b[1m: unknown feature `mmx_target_feature`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/lib.rs:30:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    mmx_target_feature,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2159,"byte_end":2194,"line_start":77,"line_end":77,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"simd_ty!(u8x2[u8]: u8, u8 | x0, x1);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2159,"byte_end":2194,"line_start":77,"line_end":77,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"simd_ty!(u8x2[u8]: u8, u8 | x0, x1);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(u8x2[u8]: u8, u8 | x0, x1);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2196,"byte_end":2231,"line_start":78,"line_end":78,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"simd_ty!(i8x2[i8]: i8, i8 | x0, x1);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2196,"byte_end":2231,"line_start":78,"line_end":78,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"simd_ty!(i8x2[i8]: i8, i8 | x0, x1);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m78\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(i8x2[i8]: i8, i8 | x0, x1);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2257,"byte_end":2308,"line_start":82,"line_end":82,"column_start":1,"column_end":52,"is_primary":false,"text":[{"text":"simd_ty!(u8x4[u8]: u8, u8, u8, u8 | x0, x1, x2, x3);","highlight_start":1,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2257,"byte_end":2308,"line_start":82,"line_end":82,"column_start":1,"column_end":52,"is_primary":false,"text":[{"text":"simd_ty!(u8x4[u8]: u8, u8, u8, u8 | x0, x1, x2, x3);","highlight_start":1,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(u8x4[u8]: u8, u8, u8, u8 | x0, x1, x2, x3);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2310,"byte_end":2349,"line_start":83,"line_end":83,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"simd_ty!(u16x2[u16]: u16, u16 | x0, x1);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2310,"byte_end":2349,"line_start":83,"line_end":83,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"simd_ty!(u16x2[u16]: u16, u16 | x0, x1);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(u16x2[u16]: u16, u16 | x0, x1);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2352,"byte_end":2403,"line_start":85,"line_end":85,"column_start":1,"column_end":52,"is_primary":false,"text":[{"text":"simd_ty!(i8x4[i8]: i8, i8, i8, i8 | x0, x1, x2, x3);","highlight_start":1,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2352,"byte_end":2403,"line_start":85,"line_end":85,"column_start":1,"column_end":52,"is_primary":false,"text":[{"text":"simd_ty!(i8x4[i8]: i8, i8, i8, i8 | x0, x1, x2, x3);","highlight_start":1,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m85\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(i8x4[i8]: i8, i8, i8, i8 | x0, x1, x2, x3);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2405,"byte_end":2444,"line_start":86,"line_end":86,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"simd_ty!(i16x2[i16]: i16, i16 | x0, x1);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2405,"byte_end":2444,"line_start":86,"line_end":86,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"simd_ty!(i16x2[i16]: i16, i16 | x0, x1);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(i16x2[i16]: i16, i16 | x0, x1);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2470,"byte_end":2571,"line_start":90,"line_end":92,"column_start":1,"column_end":43,"is_primary":false,"text":[{"text":"simd_ty!(u8x8[u8]:","highlight_start":1,"highlight_end":19},{"text":"         u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":40},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7);","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2470,"byte_end":2571,"line_start":90,"line_end":92,"column_start":1,"column_end":43,"is_primary":false,"text":[{"text":"simd_ty!(u8x8[u8]:","highlight_start":1,"highlight_end":19},{"text":"         u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":40},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7);","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(u8x8[u8]:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         u8, u8, u8, u8, u8, u8, u8, u8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         | x0, x1, x2, x3, x4, x5, x6, x7);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2573,"byte_end":2630,"line_start":93,"line_end":93,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"simd_ty!(u16x4[u16]: u16, u16, u16, u16 | x0, x1, x2, x3);","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2573,"byte_end":2630,"line_start":93,"line_end":93,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"simd_ty!(u16x4[u16]: u16, u16, u16, u16 | x0, x1, x2, x3);","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(u16x4[u16]: u16, u16, u16, u16 | x0, x1, x2, x3);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2632,"byte_end":2671,"line_start":94,"line_end":94,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"simd_ty!(u32x2[u32]: u32, u32 | x0, x1);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2632,"byte_end":2671,"line_start":94,"line_end":94,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"simd_ty!(u32x2[u32]: u32, u32 | x0, x1);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(u32x2[u32]: u32, u32 | x0, x1);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2673,"byte_end":2703,"line_start":95,"line_end":95,"column_start":1,"column_end":31,"is_primary":false,"text":[{"text":"simd_ty!(u64x1[u64]: u64 | x1);","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2673,"byte_end":2703,"line_start":95,"line_end":95,"column_start":1,"column_end":31,"is_primary":false,"text":[{"text":"simd_ty!(u64x1[u64]: u64 | x1);","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(u64x1[u64]: u64 | x1);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2706,"byte_end":2807,"line_start":97,"line_end":99,"column_start":1,"column_end":43,"is_primary":false,"text":[{"text":"simd_ty!(i8x8[i8]:","highlight_start":1,"highlight_end":19},{"text":"         i8, i8, i8, i8, i8, i8, i8, i8","highlight_start":1,"highlight_end":40},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7);","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2706,"byte_end":2807,"line_start":97,"line_end":99,"column_start":1,"column_end":43,"is_primary":false,"text":[{"text":"simd_ty!(i8x8[i8]:","highlight_start":1,"highlight_end":19},{"text":"         i8, i8, i8, i8, i8, i8, i8, i8","highlight_start":1,"highlight_end":40},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7);","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m97\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(i8x8[i8]:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m98\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         i8, i8, i8, i8, i8, i8, i8, i8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         | x0, x1, x2, x3, x4, x5, x6, x7);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2809,"byte_end":2866,"line_start":100,"line_end":100,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"simd_ty!(i16x4[i16]: i16, i16, i16, i16 | x0, x1, x2, x3);","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2809,"byte_end":2866,"line_start":100,"line_end":100,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"simd_ty!(i16x4[i16]: i16, i16, i16, i16 | x0, x1, x2, x3);","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(i16x4[i16]: i16, i16, i16, i16 | x0, x1, x2, x3);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2868,"byte_end":2907,"line_start":101,"line_end":101,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"simd_ty!(i32x2[i32]: i32, i32 | x0, x1);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2868,"byte_end":2907,"line_start":101,"line_end":101,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"simd_ty!(i32x2[i32]: i32, i32 | x0, x1);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(i32x2[i32]: i32, i32 | x0, x1);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2909,"byte_end":2939,"line_start":102,"line_end":102,"column_start":1,"column_end":31,"is_primary":false,"text":[{"text":"simd_ty!(i64x1[i64]: i64 | x1);","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2909,"byte_end":2939,"line_start":102,"line_end":102,"column_start":1,"column_end":31,"is_primary":false,"text":[{"text":"simd_ty!(i64x1[i64]: i64 | x1);","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(i64x1[i64]: i64 | x1);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2942,"byte_end":2981,"line_start":104,"line_end":104,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"simd_ty!(f32x2[f32]: f32, f32 | x0, x1);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":2942,"byte_end":2981,"line_start":104,"line_end":104,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"simd_ty!(f32x2[f32]: f32, f32 | x0, x1);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(f32x2[f32]: f32, f32 | x0, x1);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3008,"byte_end":3190,"line_start":108,"line_end":112,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"simd_ty!(u8x16[u8]:","highlight_start":1,"highlight_end":20},{"text":"         u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":41},{"text":"         u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":40},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15","highlight_start":1,"highlight_end":80},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3008,"byte_end":3190,"line_start":108,"line_end":112,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"simd_ty!(u8x16[u8]:","highlight_start":1,"highlight_end":20},{"text":"         u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":41},{"text":"         u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":40},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15","highlight_start":1,"highlight_end":80},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m108\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(u8x16[u8]:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         u8, u8, u8, u8, u8, u8, u8, u8,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         u8, u8, u8, u8, u8, u8, u8, u8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         | x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3192,"byte_end":3303,"line_start":113,"line_end":115,"column_start":1,"column_end":43,"is_primary":false,"text":[{"text":"simd_ty!(u16x8[u16]:","highlight_start":1,"highlight_end":21},{"text":"         u16, u16, u16, u16, u16, u16, u16, u16","highlight_start":1,"highlight_end":48},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7);","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3192,"byte_end":3303,"line_start":113,"line_end":115,"column_start":1,"column_end":43,"is_primary":false,"text":[{"text":"simd_ty!(u16x8[u16]:","highlight_start":1,"highlight_end":21},{"text":"         u16, u16, u16, u16, u16, u16, u16, u16","highlight_start":1,"highlight_end":48},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7);","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(u16x8[u16]:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         u16, u16, u16, u16, u16, u16, u16, u16\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         | x0, x1, x2, x3, x4, x5, x6, x7);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3305,"byte_end":3362,"line_start":116,"line_end":116,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"simd_ty!(u32x4[u32]: u32, u32, u32, u32 | x0, x1, x2, x3);","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3305,"byte_end":3362,"line_start":116,"line_end":116,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"simd_ty!(u32x4[u32]: u32, u32, u32, u32 | x0, x1, x2, x3);","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(u32x4[u32]: u32, u32, u32, u32 | x0, x1, x2, x3);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3364,"byte_end":3403,"line_start":117,"line_end":117,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"simd_ty!(u64x2[u64]: u64, u64 | x0, x1);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3364,"byte_end":3403,"line_start":117,"line_end":117,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"simd_ty!(u64x2[u64]: u64, u64 | x0, x1);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(u64x2[u64]: u64, u64 | x0, x1);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3406,"byte_end":3588,"line_start":119,"line_end":123,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"simd_ty!(i8x16[i8]:","highlight_start":1,"highlight_end":20},{"text":"         i8, i8, i8, i8, i8, i8, i8, i8,","highlight_start":1,"highlight_end":41},{"text":"         i8, i8, i8, i8, i8, i8, i8, i8","highlight_start":1,"highlight_end":40},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15","highlight_start":1,"highlight_end":80},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3406,"byte_end":3588,"line_start":119,"line_end":123,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"simd_ty!(i8x16[i8]:","highlight_start":1,"highlight_end":20},{"text":"         i8, i8, i8, i8, i8, i8, i8, i8,","highlight_start":1,"highlight_end":41},{"text":"         i8, i8, i8, i8, i8, i8, i8, i8","highlight_start":1,"highlight_end":40},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15","highlight_start":1,"highlight_end":80},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(i8x16[i8]:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         i8, i8, i8, i8, i8, i8, i8, i8,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         i8, i8, i8, i8, i8, i8, i8, i8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         | x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3590,"byte_end":3701,"line_start":124,"line_end":126,"column_start":1,"column_end":43,"is_primary":false,"text":[{"text":"simd_ty!(i16x8[i16]:","highlight_start":1,"highlight_end":21},{"text":"         i16, i16, i16, i16, i16, i16, i16, i16","highlight_start":1,"highlight_end":48},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7);","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3590,"byte_end":3701,"line_start":124,"line_end":126,"column_start":1,"column_end":43,"is_primary":false,"text":[{"text":"simd_ty!(i16x8[i16]:","highlight_start":1,"highlight_end":21},{"text":"         i16, i16, i16, i16, i16, i16, i16, i16","highlight_start":1,"highlight_end":48},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7);","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(i16x8[i16]:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         i16, i16, i16, i16, i16, i16, i16, i16\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m126\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         | x0, x1, x2, x3, x4, x5, x6, x7);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3703,"byte_end":3760,"line_start":127,"line_end":127,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"simd_ty!(i32x4[i32]: i32, i32, i32, i32 | x0, x1, x2, x3);","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3703,"byte_end":3760,"line_start":127,"line_end":127,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"simd_ty!(i32x4[i32]: i32, i32, i32, i32 | x0, x1, x2, x3);","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(i32x4[i32]: i32, i32, i32, i32 | x0, x1, x2, x3);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3762,"byte_end":3801,"line_start":128,"line_end":128,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"simd_ty!(i64x2[i64]: i64, i64 | x0, x1);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3762,"byte_end":3801,"line_start":128,"line_end":128,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"simd_ty!(i64x2[i64]: i64, i64 | x0, x1);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(i64x2[i64]: i64, i64 | x0, x1);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3804,"byte_end":3861,"line_start":130,"line_end":130,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"simd_ty!(f32x4[f32]: f32, f32, f32, f32 | x0, x1, x2, x3);","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3804,"byte_end":3861,"line_start":130,"line_end":130,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"simd_ty!(f32x4[f32]: f32, f32, f32, f32 | x0, x1, x2, x3);","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(f32x4[f32]: f32, f32, f32, f32 | x0, x1, x2, x3);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3863,"byte_end":3902,"line_start":131,"line_end":131,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"simd_ty!(f64x2[f64]: f64, f64 | x0, x1);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3863,"byte_end":3902,"line_start":131,"line_end":131,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"simd_ty!(f64x2[f64]: f64, f64 | x0, x1);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m131\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(f64x2[f64]: f64, f64 | x0, x1);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":1212,"byte_end":1224,"line_start":42,"line_end":42,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3905,"byte_end":4095,"line_start":133,"line_end":137,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"simd_m_ty!(m8x16[i8]:","highlight_start":1,"highlight_end":22},{"text":"           i8, i8, i8, i8, i8, i8, i8, i8,","highlight_start":1,"highlight_end":43},{"text":"           i8, i8, i8, i8, i8, i8, i8, i8","highlight_start":1,"highlight_end":42},{"text":"           | x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15","highlight_start":1,"highlight_end":82},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_m_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":1005,"byte_end":1027,"line_start":38,"line_end":38,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"macro_rules! simd_m_ty {","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":1188,"byte_end":1229,"line_start":42,"line_end":42,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":3905,"byte_end":4095,"line_start":133,"line_end":137,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"simd_m_ty!(m8x16[i8]:","highlight_start":1,"highlight_end":22},{"text":"           i8, i8, i8, i8, i8, i8, i8, i8,","highlight_start":1,"highlight_end":43},{"text":"           i8, i8, i8, i8, i8, i8, i8, i8","highlight_start":1,"highlight_end":42},{"text":"           | x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15","highlight_start":1,"highlight_end":82},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_m_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":1005,"byte_end":1027,"line_start":38,"line_end":38,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"macro_rules! simd_m_ty {","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:42:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m133\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_m_ty!(m8x16[i8]:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m           i8, i8, i8, i8, i8, i8, i8, i8,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m135\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m           i8, i8, i8, i8, i8, i8, i8, i8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m136\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m           | x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m137\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_m_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":1212,"byte_end":1224,"line_start":42,"line_end":42,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":4097,"byte_end":4214,"line_start":138,"line_end":140,"column_start":1,"column_end":45,"is_primary":false,"text":[{"text":"simd_m_ty!(m16x8[i16]:","highlight_start":1,"highlight_end":23},{"text":"           i16, i16, i16, i16, i16, i16, i16, i16","highlight_start":1,"highlight_end":50},{"text":"           | x0, x1, x2, x3, x4, x5, x6, x7);","highlight_start":1,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_m_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":1005,"byte_end":1027,"line_start":38,"line_end":38,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"macro_rules! simd_m_ty {","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":1188,"byte_end":1229,"line_start":42,"line_end":42,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":4097,"byte_end":4214,"line_start":138,"line_end":140,"column_start":1,"column_end":45,"is_primary":false,"text":[{"text":"simd_m_ty!(m16x8[i16]:","highlight_start":1,"highlight_end":23},{"text":"           i16, i16, i16, i16, i16, i16, i16, i16","highlight_start":1,"highlight_end":50},{"text":"           | x0, x1, x2, x3, x4, x5, x6, x7);","highlight_start":1,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_m_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":1005,"byte_end":1027,"line_start":38,"line_end":38,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"macro_rules! simd_m_ty {","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:42:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_m_ty!(m16x8[i16]:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m           i16, i16, i16, i16, i16, i16, i16, i16\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m140\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m           | x0, x1, x2, x3, x4, x5, x6, x7);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|____________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_m_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":1212,"byte_end":1224,"line_start":42,"line_end":42,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":4216,"byte_end":4275,"line_start":141,"line_end":141,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"simd_m_ty!(m32x4[i32]: i32, i32, i32, i32 | x0, x1, x2, x3);","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_m_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":1005,"byte_end":1027,"line_start":38,"line_end":38,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"macro_rules! simd_m_ty {","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":1188,"byte_end":1229,"line_start":42,"line_end":42,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":4216,"byte_end":4275,"line_start":141,"line_end":141,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"simd_m_ty!(m32x4[i32]: i32, i32, i32, i32 | x0, x1, x2, x3);","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_m_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":1005,"byte_end":1027,"line_start":38,"line_end":38,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"macro_rules! simd_m_ty {","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:42:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m141\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_m_ty!(m32x4[i32]: i32, i32, i32, i32 | x0, x1, x2, x3);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_m_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":1212,"byte_end":1224,"line_start":42,"line_end":42,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":4277,"byte_end":4318,"line_start":142,"line_end":142,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"simd_m_ty!(m64x2[i64]: i64, i64 | x0, x1);","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_m_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":1005,"byte_end":1027,"line_start":38,"line_end":38,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"macro_rules! simd_m_ty {","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":1188,"byte_end":1229,"line_start":42,"line_end":42,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":4277,"byte_end":4318,"line_start":142,"line_end":142,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"simd_m_ty!(m64x2[i64]: i64, i64 | x0, x1);","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_m_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":1005,"byte_end":1027,"line_start":38,"line_end":38,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"macro_rules! simd_m_ty {","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:42:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_m_ty!(m64x2[i64]: i64, i64 | x0, x1);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_m_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":4345,"byte_end":4716,"line_start":146,"line_end":155,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"simd_ty!(u8x32[u8]:","highlight_start":1,"highlight_end":20},{"text":"         u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":41},{"text":"         u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":41},{"text":"         u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":41},{"text":"         u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":40},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7,","highlight_start":1,"highlight_end":43},{"text":"         x8, x9, x10, x11, x12, x13, x14, x15,","highlight_start":1,"highlight_end":47},{"text":"         x16, x17, x18, x19, x20, x21, x22, x23,","highlight_start":1,"highlight_end":49},{"text":"         x24, x25, x26, x27, x28, x29, x30, x31","highlight_start":1,"highlight_end":48},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":4345,"byte_end":4716,"line_start":146,"line_end":155,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"simd_ty!(u8x32[u8]:","highlight_start":1,"highlight_end":20},{"text":"         u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":41},{"text":"         u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":41},{"text":"         u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":41},{"text":"         u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":40},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7,","highlight_start":1,"highlight_end":43},{"text":"         x8, x9, x10, x11, x12, x13, x14, x15,","highlight_start":1,"highlight_end":47},{"text":"         x16, x17, x18, x19, x20, x21, x22, x23,","highlight_start":1,"highlight_end":49},{"text":"         x24, x25, x26, x27, x28, x29, x30, x31","highlight_start":1,"highlight_end":48},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(u8x32[u8]:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         u8, u8, u8, u8, u8, u8, u8, u8,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m148\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         u8, u8, u8, u8, u8, u8, u8, u8,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         u8, u8, u8, u8, u8, u8, u8, u8,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m154\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         x24, x25, x26, x27, x28, x29, x30, x31\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":4718,"byte_end":4918,"line_start":156,"line_end":160,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"simd_ty!(u16x16[u16]:","highlight_start":1,"highlight_end":22},{"text":"         u16, u16, u16, u16, u16, u16, u16, u16,","highlight_start":1,"highlight_end":49},{"text":"         u16, u16, u16, u16, u16, u16, u16, u16","highlight_start":1,"highlight_end":48},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15","highlight_start":1,"highlight_end":80},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":4718,"byte_end":4918,"line_start":156,"line_end":160,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"simd_ty!(u16x16[u16]:","highlight_start":1,"highlight_end":22},{"text":"         u16, u16, u16, u16, u16, u16, u16, u16,","highlight_start":1,"highlight_end":49},{"text":"         u16, u16, u16, u16, u16, u16, u16, u16","highlight_start":1,"highlight_end":48},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15","highlight_start":1,"highlight_end":80},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(u16x16[u16]:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m157\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         u16, u16, u16, u16, u16, u16, u16, u16,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         u16, u16, u16, u16, u16, u16, u16, u16\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m159\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         | x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m160\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":4920,"byte_end":5031,"line_start":161,"line_end":163,"column_start":1,"column_end":43,"is_primary":false,"text":[{"text":"simd_ty!(u32x8[u32]:","highlight_start":1,"highlight_end":21},{"text":"         u32, u32, u32, u32, u32, u32, u32, u32","highlight_start":1,"highlight_end":48},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7);","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":4920,"byte_end":5031,"line_start":161,"line_end":163,"column_start":1,"column_end":43,"is_primary":false,"text":[{"text":"simd_ty!(u32x8[u32]:","highlight_start":1,"highlight_end":21},{"text":"         u32, u32, u32, u32, u32, u32, u32, u32","highlight_start":1,"highlight_end":48},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7);","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(u32x8[u32]:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         u32, u32, u32, u32, u32, u32, u32, u32\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         | x0, x1, x2, x3, x4, x5, x6, x7);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":5033,"byte_end":5090,"line_start":164,"line_end":164,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"simd_ty!(u64x4[u64]: u64, u64, u64, u64 | x0, x1, x2, x3);","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":5033,"byte_end":5090,"line_start":164,"line_end":164,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"simd_ty!(u64x4[u64]: u64, u64, u64, u64 | x0, x1, x2, x3);","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(u64x4[u64]: u64, u64, u64, u64 | x0, x1, x2, x3);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":5093,"byte_end":5464,"line_start":166,"line_end":175,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"simd_ty!(i8x32[i8]:","highlight_start":1,"highlight_end":20},{"text":"         i8, i8, i8, i8, i8, i8, i8, i8,","highlight_start":1,"highlight_end":41},{"text":"         i8, i8, i8, i8, i8, i8, i8, i8,","highlight_start":1,"highlight_end":41},{"text":"         i8, i8, i8, i8, i8, i8, i8, i8,","highlight_start":1,"highlight_end":41},{"text":"         i8, i8, i8, i8, i8, i8, i8, i8","highlight_start":1,"highlight_end":40},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7,","highlight_start":1,"highlight_end":43},{"text":"         x8, x9, x10, x11, x12, x13, x14, x15,","highlight_start":1,"highlight_end":47},{"text":"         x16, x17, x18, x19, x20, x21, x22, x23,","highlight_start":1,"highlight_end":49},{"text":"         x24, x25, x26, x27, x28, x29, x30, x31","highlight_start":1,"highlight_end":48},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":5093,"byte_end":5464,"line_start":166,"line_end":175,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"simd_ty!(i8x32[i8]:","highlight_start":1,"highlight_end":20},{"text":"         i8, i8, i8, i8, i8, i8, i8, i8,","highlight_start":1,"highlight_end":41},{"text":"         i8, i8, i8, i8, i8, i8, i8, i8,","highlight_start":1,"highlight_end":41},{"text":"         i8, i8, i8, i8, i8, i8, i8, i8,","highlight_start":1,"highlight_end":41},{"text":"         i8, i8, i8, i8, i8, i8, i8, i8","highlight_start":1,"highlight_end":40},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7,","highlight_start":1,"highlight_end":43},{"text":"         x8, x9, x10, x11, x12, x13, x14, x15,","highlight_start":1,"highlight_end":47},{"text":"         x16, x17, x18, x19, x20, x21, x22, x23,","highlight_start":1,"highlight_end":49},{"text":"         x24, x25, x26, x27, x28, x29, x30, x31","highlight_start":1,"highlight_end":48},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(i8x32[i8]:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m167\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         i8, i8, i8, i8, i8, i8, i8, i8,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         i8, i8, i8, i8, i8, i8, i8, i8,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         i8, i8, i8, i8, i8, i8, i8, i8,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         x24, x25, x26, x27, x28, x29, x30, x31\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":5466,"byte_end":5666,"line_start":176,"line_end":180,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"simd_ty!(i16x16[i16]:","highlight_start":1,"highlight_end":22},{"text":"         i16, i16, i16, i16, i16, i16, i16, i16,","highlight_start":1,"highlight_end":49},{"text":"         i16, i16, i16, i16, i16, i16, i16, i16","highlight_start":1,"highlight_end":48},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15","highlight_start":1,"highlight_end":80},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":5466,"byte_end":5666,"line_start":176,"line_end":180,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"simd_ty!(i16x16[i16]:","highlight_start":1,"highlight_end":22},{"text":"         i16, i16, i16, i16, i16, i16, i16, i16,","highlight_start":1,"highlight_end":49},{"text":"         i16, i16, i16, i16, i16, i16, i16, i16","highlight_start":1,"highlight_end":48},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15","highlight_start":1,"highlight_end":80},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(i16x16[i16]:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         i16, i16, i16, i16, i16, i16, i16, i16,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         i16, i16, i16, i16, i16, i16, i16, i16\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m179\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         | x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m180\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":5668,"byte_end":5779,"line_start":181,"line_end":183,"column_start":1,"column_end":43,"is_primary":false,"text":[{"text":"simd_ty!(i32x8[i32]:","highlight_start":1,"highlight_end":21},{"text":"         i32, i32, i32, i32, i32, i32, i32, i32","highlight_start":1,"highlight_end":48},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7);","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":5668,"byte_end":5779,"line_start":181,"line_end":183,"column_start":1,"column_end":43,"is_primary":false,"text":[{"text":"simd_ty!(i32x8[i32]:","highlight_start":1,"highlight_end":21},{"text":"         i32, i32, i32, i32, i32, i32, i32, i32","highlight_start":1,"highlight_end":48},{"text":"         | x0, x1, x2, x3, x4, x5, x6, x7);","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m181\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(i32x8[i32]:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m182\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         i32, i32, i32, i32, i32, i32, i32, i32\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m183\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         | x0, x1, x2, x3, x4, x5, x6, x7);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":311,"byte_end":323,"line_start":11,"line_end":11,"column_start":33,"column_end":45,"is_primary":false,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":33,"highlight_end":45}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":5781,"byte_end":5838,"line_start":184,"line_end":184,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"simd_ty!(i64x4[i64]: i64, i64, i64, i64 | x0, x1, x2, x3);","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":287,"byte_end":328,"line_start":11,"line_end":11,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        pub(crate) struct $id($(pub $elem_ty),*);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":5781,"byte_end":5838,"line_start":184,"line_end":184,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"simd_ty!(i64x4[i64]: i64, i64, i64, i64 | x0, x1, x2, x3);","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"simd_ty!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs","byte_start":106,"byte_end":126,"line_start":7,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! simd_ty {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd.rs:11:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) struct $id($(pub $elem_ty),*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m184\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msimd_ty!(i64x4[i64]: i64, i64, i64, i64 | x0, x1, x2, x3);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `simd_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":138,"byte_end":176,"line_start":6,"line_end":6,"column_start":5,"column_end":43,"is_primary":true,"text":[{"text":"    pub fn simd_eq<T, U>(x: T, y: T) -> U;","highlight_start":5,"highlight_end":43}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_eq<T, U>(x: T, y: T) -> U;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":181,"byte_end":219,"line_start":7,"line_end":7,"column_start":5,"column_end":43,"is_primary":true,"text":[{"text":"    pub fn simd_ne<T, U>(x: T, y: T) -> U;","highlight_start":5,"highlight_end":43}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:7:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_ne<T, U>(x: T, y: T) -> U;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":224,"byte_end":262,"line_start":8,"line_end":8,"column_start":5,"column_end":43,"is_primary":true,"text":[{"text":"    pub fn simd_lt<T, U>(x: T, y: T) -> U;","highlight_start":5,"highlight_end":43}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:8:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_lt<T, U>(x: T, y: T) -> U;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":267,"byte_end":305,"line_start":9,"line_end":9,"column_start":5,"column_end":43,"is_primary":true,"text":[{"text":"    pub fn simd_le<T, U>(x: T, y: T) -> U;","highlight_start":5,"highlight_end":43}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:9:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_le<T, U>(x: T, y: T) -> U;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":310,"byte_end":348,"line_start":10,"line_end":10,"column_start":5,"column_end":43,"is_primary":true,"text":[{"text":"    pub fn simd_gt<T, U>(x: T, y: T) -> U;","highlight_start":5,"highlight_end":43}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:10:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_gt<T, U>(x: T, y: T) -> U;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":353,"byte_end":391,"line_start":11,"line_end":11,"column_start":5,"column_end":43,"is_primary":true,"text":[{"text":"    pub fn simd_ge<T, U>(x: T, y: T) -> U;","highlight_start":5,"highlight_end":43}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:11:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_ge<T, U>(x: T, y: T) -> U;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":397,"byte_end":456,"line_start":13,"line_end":13,"column_start":5,"column_end":64,"is_primary":true,"text":[{"text":"    pub fn simd_shuffle2<T, U>(x: T, y: T, idx: [u32; 2]) -> U;","highlight_start":5,"highlight_end":64}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:13:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_shuffle2<T, U>(x: T, y: T, idx: [u32; 2]) -> U;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":461,"byte_end":520,"line_start":14,"line_end":14,"column_start":5,"column_end":64,"is_primary":true,"text":[{"text":"    pub fn simd_shuffle4<T, U>(x: T, y: T, idx: [u32; 4]) -> U;","highlight_start":5,"highlight_end":64}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:14:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_shuffle4<T, U>(x: T, y: T, idx: [u32; 4]) -> U;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":525,"byte_end":584,"line_start":15,"line_end":15,"column_start":5,"column_end":64,"is_primary":true,"text":[{"text":"    pub fn simd_shuffle8<T, U>(x: T, y: T, idx: [u32; 8]) -> U;","highlight_start":5,"highlight_end":64}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:15:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_shuffle8<T, U>(x: T, y: T, idx: [u32; 8]) -> U;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":589,"byte_end":650,"line_start":16,"line_end":16,"column_start":5,"column_end":66,"is_primary":true,"text":[{"text":"    pub fn simd_shuffle16<T, U>(x: T, y: T, idx: [u32; 16]) -> U;","highlight_start":5,"highlight_end":66}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:16:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_shuffle16<T, U>(x: T, y: T, idx: [u32; 16]) -> U;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":655,"byte_end":716,"line_start":17,"line_end":17,"column_start":5,"column_end":66,"is_primary":true,"text":[{"text":"    pub fn simd_shuffle32<T, U>(x: T, y: T, idx: [u32; 32]) -> U;","highlight_start":5,"highlight_end":66}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:17:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_shuffle32<T, U>(x: T, y: T, idx: [u32; 32]) -> U;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":721,"byte_end":782,"line_start":18,"line_end":18,"column_start":5,"column_end":66,"is_primary":true,"text":[{"text":"    pub fn simd_shuffle64<T, U>(x: T, y: T, idx: [u32; 64]) -> U;","highlight_start":5,"highlight_end":66}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:18:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_shuffle64<T, U>(x: T, y: T, idx: [u32; 64]) -> U;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":787,"byte_end":850,"line_start":19,"line_end":19,"column_start":5,"column_end":68,"is_primary":true,"text":[{"text":"    pub fn simd_shuffle128<T, U>(x: T, y: T, idx: [u32; 128]) -> U;","highlight_start":5,"highlight_end":68}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:19:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_shuffle128<T, U>(x: T, y: T, idx: [u32; 128]) -> U;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":856,"byte_end":910,"line_start":21,"line_end":21,"column_start":5,"column_end":59,"is_primary":true,"text":[{"text":"    pub fn simd_insert<T, U>(x: T, idx: u32, val: U) -> T;","highlight_start":5,"highlight_end":59}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:21:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_insert<T, U>(x: T, idx: u32, val: U) -> T;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":915,"byte_end":962,"line_start":22,"line_end":22,"column_start":5,"column_end":52,"is_primary":true,"text":[{"text":"    pub fn simd_extract<T, U>(x: T, idx: u32) -> U;","highlight_start":5,"highlight_end":52}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:22:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_extract<T, U>(x: T, idx: u32) -> U;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":968,"byte_end":1002,"line_start":24,"line_end":24,"column_start":5,"column_end":39,"is_primary":true,"text":[{"text":"    pub fn simd_cast<T, U>(x: T) -> U;","highlight_start":5,"highlight_end":39}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:24:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_cast<T, U>(x: T) -> U;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":1008,"byte_end":1044,"line_start":26,"line_end":26,"column_start":5,"column_end":41,"is_primary":true,"text":[{"text":"    pub fn simd_add<T>(x: T, y: T) -> T;","highlight_start":5,"highlight_end":41}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:26:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_add<T>(x: T, y: T) -> T;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":1049,"byte_end":1085,"line_start":27,"line_end":27,"column_start":5,"column_end":41,"is_primary":true,"text":[{"text":"    pub fn simd_sub<T>(x: T, y: T) -> T;","highlight_start":5,"highlight_end":41}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:27:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_sub<T>(x: T, y: T) -> T;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":1090,"byte_end":1126,"line_start":28,"line_end":28,"column_start":5,"column_end":41,"is_primary":true,"text":[{"text":"    pub fn simd_mul<T>(x: T, y: T) -> T;","highlight_start":5,"highlight_end":41}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:28:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_mul<T>(x: T, y: T) -> T;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":1131,"byte_end":1167,"line_start":29,"line_end":29,"column_start":5,"column_end":41,"is_primary":true,"text":[{"text":"    pub fn simd_div<T>(x: T, y: T) -> T;","highlight_start":5,"highlight_end":41}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:29:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_div<T>(x: T, y: T) -> T;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":1172,"byte_end":1208,"line_start":30,"line_end":30,"column_start":5,"column_end":41,"is_primary":true,"text":[{"text":"    pub fn simd_rem<T>(x: T, y: T) -> T;","highlight_start":5,"highlight_end":41}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:30:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_rem<T>(x: T, y: T) -> T;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":1213,"byte_end":1249,"line_start":31,"line_end":31,"column_start":5,"column_end":41,"is_primary":true,"text":[{"text":"    pub fn simd_shl<T>(x: T, y: T) -> T;","highlight_start":5,"highlight_end":41}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:31:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_shl<T>(x: T, y: T) -> T;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":1254,"byte_end":1290,"line_start":32,"line_end":32,"column_start":5,"column_end":41,"is_primary":true,"text":[{"text":"    pub fn simd_shr<T>(x: T, y: T) -> T;","highlight_start":5,"highlight_end":41}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:32:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_shr<T>(x: T, y: T) -> T;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":1295,"byte_end":1331,"line_start":33,"line_end":33,"column_start":5,"column_end":41,"is_primary":true,"text":[{"text":"    pub fn simd_and<T>(x: T, y: T) -> T;","highlight_start":5,"highlight_end":41}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:33:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_and<T>(x: T, y: T) -> T;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":1336,"byte_end":1371,"line_start":34,"line_end":34,"column_start":5,"column_end":40,"is_primary":true,"text":[{"text":"    pub fn simd_or<T>(x: T, y: T) -> T;","highlight_start":5,"highlight_end":40}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:34:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_or<T>(x: T, y: T) -> T;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":1376,"byte_end":1412,"line_start":35,"line_end":35,"column_start":5,"column_end":41,"is_primary":true,"text":[{"text":"    pub fn simd_xor<T>(x: T, y: T) -> T;","highlight_start":5,"highlight_end":41}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:35:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_xor<T>(x: T, y: T) -> T;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":1418,"byte_end":1468,"line_start":37,"line_end":37,"column_start":5,"column_end":55,"is_primary":true,"text":[{"text":"    pub fn simd_reduce_add_unordered<T, U>(x: T) -> U;","highlight_start":5,"highlight_end":55}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:37:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_reduce_add_unordered<T, U>(x: T) -> U;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":1473,"byte_end":1523,"line_start":38,"line_end":38,"column_start":5,"column_end":55,"is_primary":true,"text":[{"text":"    pub fn simd_reduce_mul_unordered<T, U>(x: T) -> U;","highlight_start":5,"highlight_end":55}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:38:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_reduce_mul_unordered<T, U>(x: T) -> U;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":1528,"byte_end":1584,"line_start":39,"line_end":39,"column_start":5,"column_end":61,"is_primary":true,"text":[{"text":"    pub fn simd_reduce_add_ordered<T, U>(x: T, acc: U) -> U;","highlight_start":5,"highlight_end":61}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:39:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_reduce_add_ordered<T, U>(x: T, acc: U) -> U;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":1589,"byte_end":1645,"line_start":40,"line_end":40,"column_start":5,"column_end":61,"is_primary":true,"text":[{"text":"    pub fn simd_reduce_mul_ordered<T, U>(x: T, acc: U) -> U;","highlight_start":5,"highlight_end":61}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:40:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_reduce_mul_ordered<T, U>(x: T, acc: U) -> U;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":1650,"byte_end":1690,"line_start":41,"line_end":41,"column_start":5,"column_end":45,"is_primary":true,"text":[{"text":"    pub fn simd_reduce_min<T, U>(x: T) -> U;","highlight_start":5,"highlight_end":45}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:41:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_reduce_min<T, U>(x: T) -> U;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":1695,"byte_end":1735,"line_start":42,"line_end":42,"column_start":5,"column_end":45,"is_primary":true,"text":[{"text":"    pub fn simd_reduce_max<T, U>(x: T) -> U;","highlight_start":5,"highlight_end":45}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:42:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_reduce_max<T, U>(x: T) -> U;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":1740,"byte_end":1788,"line_start":43,"line_end":43,"column_start":5,"column_end":53,"is_primary":true,"text":[{"text":"    pub fn simd_reduce_min_nanless<T, U>(x: T) -> U;","highlight_start":5,"highlight_end":53}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:43:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_reduce_min_nanless<T, U>(x: T) -> U;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":1793,"byte_end":1841,"line_start":44,"line_end":44,"column_start":5,"column_end":53,"is_primary":true,"text":[{"text":"    pub fn simd_reduce_max_nanless<T, U>(x: T) -> U;","highlight_start":5,"highlight_end":53}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:44:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_reduce_max_nanless<T, U>(x: T) -> U;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":1846,"byte_end":1886,"line_start":45,"line_end":45,"column_start":5,"column_end":45,"is_primary":true,"text":[{"text":"    pub fn simd_reduce_and<T, U>(x: T) -> U;","highlight_start":5,"highlight_end":45}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:45:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_reduce_and<T, U>(x: T) -> U;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":1891,"byte_end":1930,"line_start":46,"line_end":46,"column_start":5,"column_end":44,"is_primary":true,"text":[{"text":"    pub fn simd_reduce_or<T, U>(x: T) -> U;","highlight_start":5,"highlight_end":44}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:46:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_reduce_or<T, U>(x: T) -> U;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":1935,"byte_end":1975,"line_start":47,"line_end":47,"column_start":5,"column_end":45,"is_primary":true,"text":[{"text":"    pub fn simd_reduce_xor<T, U>(x: T) -> U;","highlight_start":5,"highlight_end":45}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:47:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_reduce_xor<T, U>(x: T) -> U;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":1980,"byte_end":2020,"line_start":48,"line_end":48,"column_start":5,"column_end":45,"is_primary":true,"text":[{"text":"    pub fn simd_reduce_all<T>(x: T) -> bool;","highlight_start":5,"highlight_end":45}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:48:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_reduce_all<T>(x: T) -> bool;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":2025,"byte_end":2065,"line_start":49,"line_end":49,"column_start":5,"column_end":45,"is_primary":true,"text":[{"text":"    pub fn simd_reduce_any<T>(x: T) -> bool;","highlight_start":5,"highlight_end":45}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:49:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_reduce_any<T>(x: T) -> bool;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":2071,"byte_end":2119,"line_start":51,"line_end":51,"column_start":5,"column_end":53,"is_primary":true,"text":[{"text":"    pub fn simd_select<M, T>(m: M, a: T, b: T) -> T;","highlight_start":5,"highlight_end":53}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:51:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_select<M, T>(m: M, a: T, b: T) -> T;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":2125,"byte_end":2162,"line_start":53,"line_end":53,"column_start":5,"column_end":42,"is_primary":true,"text":[{"text":"    pub fn simd_fmin<T>(a: T, b: T) -> T;","highlight_start":5,"highlight_end":42}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:53:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_fmin<T>(a: T, b: T) -> T;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":2167,"byte_end":2204,"line_start":54,"line_end":54,"column_start":5,"column_end":42,"is_primary":true,"text":[{"text":"    pub fn simd_fmax<T>(a: T, b: T) -> T;","highlight_start":5,"highlight_end":42}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:54:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_fmax<T>(a: T, b: T) -> T;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":2210,"byte_end":2242,"line_start":56,"line_end":56,"column_start":5,"column_end":37,"is_primary":true,"text":[{"text":"    pub fn simd_fsqrt<T>(a: T) -> T;","highlight_start":5,"highlight_end":37}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:56:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_fsqrt<T>(a: T) -> T;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"foreign items may not have type parameters","code":{"code":"E0044","explanation":"You cannot use type or const parameters on foreign items.\n\nExample of erroneous code:\n\n```compile_fail,E0044\nextern \"C\" { fn some_func<T>(x: T); }\n```\n\nTo fix this, replace the generic parameter with the specializations that you\nneed:\n\n```\nextern \"C\" { fn some_func_i32(x: i32); }\nextern \"C\" { fn some_func_i64(x: i64); }\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs","byte_start":2247,"byte_end":2289,"line_start":57,"line_end":57,"column_start":5,"column_end":47,"is_primary":true,"text":[{"text":"    pub fn simd_fma<T>(a: T, b: T, c: T) -> T;","highlight_start":5,"highlight_end":47}],"label":"can't have type parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the type parameters with concrete types like `u32`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0044]\u001b[0m\u001b[0m\u001b[1m: foreign items may not have type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/simd_llvm.rs:57:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn simd_fma<T>(a: T, b: T, c: T) -> T;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't have type parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: replace the type parameters with concrete types like `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":289,"byte_end":292,"line_start":14,"line_end":14,"column_start":28,"column_end":31,"is_primary":false,"text":[{"text":"    pub struct float64x1_t(f64); // FIXME: check this!","highlight_start":28,"highlight_end":31}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":192,"byte_end":653,"line_start":12,"line_end":21,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of one packed `f64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float64x1_t(f64); // FIXME: check this!","highlight_start":1,"highlight_end":55},{"text":"    /// ARM-specific 128-bit wide vector of two packed `f64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct float64x2_t(f64, f64);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `p64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct poly64x1_t(i64); // FIXME: check this!","highlight_start":1,"highlight_end":54},{"text":"    /// ARM-specific 64-bit wide vector of two packed `p64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct poly64x2_t(i64, i64); // FIXME: check this!","highlight_start":1,"highlight_end":59},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:12:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of one packed `f64`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct float64x1_t(f64); // FIXME: check this!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 128-bit wide vector of two packed `f64`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct poly64x2_t(i64, i64); // FIXME: check this!\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":406,"byte_end":409,"line_start":16,"line_end":16,"column_start":28,"column_end":31,"is_primary":false,"text":[{"text":"    pub struct float64x2_t(f64, f64);","highlight_start":28,"highlight_end":31}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":192,"byte_end":653,"line_start":12,"line_end":21,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of one packed `f64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float64x1_t(f64); // FIXME: check this!","highlight_start":1,"highlight_end":55},{"text":"    /// ARM-specific 128-bit wide vector of two packed `f64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct float64x2_t(f64, f64);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `p64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct poly64x1_t(i64); // FIXME: check this!","highlight_start":1,"highlight_end":54},{"text":"    /// ARM-specific 64-bit wide vector of two packed `p64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct poly64x2_t(i64, i64); // FIXME: check this!","highlight_start":1,"highlight_end":59},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:12:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of one packed `f64`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct float64x1_t(f64); // FIXME: check this!\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 128-bit wide vector of two packed `f64`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct float64x2_t(f64, f64);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct poly64x2_t(i64, i64); // FIXME: check this!\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":504,"byte_end":507,"line_start":18,"line_end":18,"column_start":27,"column_end":30,"is_primary":false,"text":[{"text":"    pub struct poly64x1_t(i64); // FIXME: check this!","highlight_start":27,"highlight_end":30}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":192,"byte_end":653,"line_start":12,"line_end":21,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of one packed `f64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float64x1_t(f64); // FIXME: check this!","highlight_start":1,"highlight_end":55},{"text":"    /// ARM-specific 128-bit wide vector of two packed `f64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct float64x2_t(f64, f64);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `p64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct poly64x1_t(i64); // FIXME: check this!","highlight_start":1,"highlight_end":54},{"text":"    /// ARM-specific 64-bit wide vector of two packed `p64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct poly64x2_t(i64, i64); // FIXME: check this!","highlight_start":1,"highlight_end":59},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:12:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of one packed `f64`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct float64x1_t(f64); // FIXME: check this!\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 128-bit wide vector of two packed `f64`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct poly64x1_t(i64); // FIXME: check this!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of two packed `p64`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct poly64x2_t(i64, i64); // FIXME: check this!\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":619,"byte_end":622,"line_start":20,"line_end":20,"column_start":27,"column_end":30,"is_primary":false,"text":[{"text":"    pub struct poly64x2_t(i64, i64); // FIXME: check this!","highlight_start":27,"highlight_end":30}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":192,"byte_end":653,"line_start":12,"line_end":21,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of one packed `f64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float64x1_t(f64); // FIXME: check this!","highlight_start":1,"highlight_end":55},{"text":"    /// ARM-specific 128-bit wide vector of two packed `f64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct float64x2_t(f64, f64);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `p64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct poly64x1_t(i64); // FIXME: check this!","highlight_start":1,"highlight_end":54},{"text":"    /// ARM-specific 64-bit wide vector of two packed `p64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct poly64x2_t(i64, i64); // FIXME: check this!","highlight_start":1,"highlight_end":59},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:12:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of one packed `f64`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct float64x1_t(f64); // FIXME: check this!\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 128-bit wide vector of two packed `f64`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct poly64x2_t(i64, i64); // FIXME: check this!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the feature named `crypto` is not valid for this target","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/crypto.rs","byte_start":2073,"byte_end":2090,"line_start":57,"line_end":57,"column_start":18,"column_end":35,"is_primary":true,"text":[{"text":"#[target_feature(enable = \"crypto\")]","highlight_start":18,"highlight_end":35}],"label":"`crypto` is not valid for this target","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the feature named `crypto` is not valid for this target\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/crypto.rs:57:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[target_feature(enable = \"crypto\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`crypto` is not valid for this target\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the feature named `crypto` is not valid for this target","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/crypto.rs","byte_start":2295,"byte_end":2312,"line_start":65,"line_end":65,"column_start":18,"column_end":35,"is_primary":true,"text":[{"text":"#[target_feature(enable = \"crypto\")]","highlight_start":18,"highlight_end":35}],"label":"`crypto` is not valid for this target","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the feature named `crypto` is not valid for this target\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/crypto.rs:65:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[target_feature(enable = \"crypto\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`crypto` is not valid for this target\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the feature named `crypto` is not valid for this target","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/crypto.rs","byte_start":2505,"byte_end":2522,"line_start":73,"line_end":73,"column_start":18,"column_end":35,"is_primary":true,"text":[{"text":"#[target_feature(enable = \"crypto\")]","highlight_start":18,"highlight_end":35}],"label":"`crypto` is not valid for this target","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the feature named `crypto` is not valid for this target\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/crypto.rs:73:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[target_feature(enable = \"crypto\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`crypto` is not valid for this target\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the feature named `crypto` is not valid for this target","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/crypto.rs","byte_start":2704,"byte_end":2721,"line_start":81,"line_end":81,"column_start":18,"column_end":35,"is_primary":true,"text":[{"text":"#[target_feature(enable = \"crypto\")]","highlight_start":18,"highlight_end":35}],"label":"`crypto` is not valid for this target","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the feature named `crypto` is not valid for this target\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/crypto.rs:81:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[target_feature(enable = \"crypto\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`crypto` is not valid for this target\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the feature named `crypto` is not valid for this target","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/crypto.rs","byte_start":2900,"byte_end":2917,"line_start":89,"line_end":89,"column_start":18,"column_end":35,"is_primary":true,"text":[{"text":"#[target_feature(enable = \"crypto\")]","highlight_start":18,"highlight_end":35}],"label":"`crypto` is not valid for this target","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the feature named `crypto` is not valid for this target\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/crypto.rs:89:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[target_feature(enable = \"crypto\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`crypto` is not valid for this target\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the feature named `crypto` is not valid for this target","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/crypto.rs","byte_start":3102,"byte_end":3119,"line_start":97,"line_end":97,"column_start":18,"column_end":35,"is_primary":true,"text":[{"text":"#[target_feature(enable = \"crypto\")]","highlight_start":18,"highlight_end":35}],"label":"`crypto` is not valid for this target","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the feature named `crypto` is not valid for this target\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/crypto.rs:97:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m97\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[target_feature(enable = \"crypto\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`crypto` is not valid for this target\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the feature named `crypto` is not valid for this target","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/crypto.rs","byte_start":3376,"byte_end":3393,"line_start":107,"line_end":107,"column_start":18,"column_end":35,"is_primary":true,"text":[{"text":"#[target_feature(enable = \"crypto\")]","highlight_start":18,"highlight_end":35}],"label":"`crypto` is not valid for this target","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the feature named `crypto` is not valid for this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/crypto.rs:107:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[target_feature(enable = \"crypto\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`crypto` is not valid for this target\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the feature named `crypto` is not valid for this target","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/crypto.rs","byte_start":3648,"byte_end":3665,"line_start":117,"line_end":117,"column_start":18,"column_end":35,"is_primary":true,"text":[{"text":"#[target_feature(enable = \"crypto\")]","highlight_start":18,"highlight_end":35}],"label":"`crypto` is not valid for this target","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the feature named `crypto` is not valid for this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/crypto.rs:117:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[target_feature(enable = \"crypto\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`crypto` is not valid for this target\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the feature named `crypto` is not valid for this target","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/crypto.rs","byte_start":3928,"byte_end":3945,"line_start":127,"line_end":127,"column_start":18,"column_end":35,"is_primary":true,"text":[{"text":"#[target_feature(enable = \"crypto\")]","highlight_start":18,"highlight_end":35}],"label":"`crypto` is not valid for this target","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the feature named `crypto` is not valid for this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/crypto.rs:127:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[target_feature(enable = \"crypto\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`crypto` is not valid for this target\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the feature named `crypto` is not valid for this target","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/crypto.rs","byte_start":4214,"byte_end":4231,"line_start":137,"line_end":137,"column_start":18,"column_end":35,"is_primary":true,"text":[{"text":"#[target_feature(enable = \"crypto\")]","highlight_start":18,"highlight_end":35}],"label":"`crypto` is not valid for this target","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the feature named `crypto` is not valid for this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/crypto.rs:137:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m137\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[target_feature(enable = \"crypto\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`crypto` is not valid for this target\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the feature named `crypto` is not valid for this target","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/crypto.rs","byte_start":4465,"byte_end":4482,"line_start":147,"line_end":147,"column_start":18,"column_end":35,"is_primary":true,"text":[{"text":"#[target_feature(enable = \"crypto\")]","highlight_start":18,"highlight_end":35}],"label":"`crypto` is not valid for this target","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the feature named `crypto` is not valid for this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/crypto.rs:147:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[target_feature(enable = \"crypto\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`crypto` is not valid for this target\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the feature named `crypto` is not valid for this target","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/crypto.rs","byte_start":4762,"byte_end":4779,"line_start":157,"line_end":157,"column_start":18,"column_end":35,"is_primary":true,"text":[{"text":"#[target_feature(enable = \"crypto\")]","highlight_start":18,"highlight_end":35}],"label":"`crypto` is not valid for this target","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the feature named `crypto` is not valid for this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/crypto.rs:157:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m157\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[target_feature(enable = \"crypto\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`crypto` is not valid for this target\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the feature named `crypto` is not valid for this target","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/crypto.rs","byte_start":5066,"byte_end":5083,"line_start":167,"line_end":167,"column_start":18,"column_end":35,"is_primary":true,"text":[{"text":"#[target_feature(enable = \"crypto\")]","highlight_start":18,"highlight_end":35}],"label":"`crypto` is not valid for this target","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the feature named `crypto` is not valid for this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/crypto.rs:167:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m167\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[target_feature(enable = \"crypto\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`crypto` is not valid for this target\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the feature named `crypto` is not valid for this target","code":null,"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/crypto.rs","byte_start":5334,"byte_end":5351,"line_start":177,"line_end":177,"column_start":18,"column_end":35,"is_primary":true,"text":[{"text":"#[target_feature(enable = \"crypto\")]","highlight_start":18,"highlight_end":35}],"label":"`crypto` is not valid for this target","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the feature named `crypto` is not valid for this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/crypto.rs:177:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[target_feature(enable = \"crypto\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`crypto` is not valid for this target\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":196,"byte_end":198,"line_start":9,"line_end":9,"column_start":25,"column_end":27,"is_primary":false,"text":[{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":25,"highlight_end":27}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":316,"byte_end":318,"line_start":11,"line_end":11,"column_start":26,"column_end":28,"is_primary":false,"text":[{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":26,"highlight_end":28}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":447,"byte_end":449,"line_start":13,"line_end":13,"column_start":26,"column_end":28,"is_primary":false,"text":[{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":26,"highlight_end":28}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":567,"byte_end":570,"line_start":15,"line_end":15,"column_start":26,"column_end":29,"is_primary":false,"text":[{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":26,"highlight_end":29}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int16x4_t(i16, i16, i16, i16);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":676,"byte_end":679,"line_start":17,"line_end":17,"column_start":27,"column_end":30,"is_primary":false,"text":[{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":27,"highlight_end":30}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint16x4_t(u16, u16, u16, u16);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":904,"byte_end":907,"line_start":21,"line_end":21,"column_start":27,"column_end":30,"is_primary":false,"text":[{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":27,"highlight_end":30}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct poly16x4_t(u16, u16, u16, u16);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":1011,"byte_end":1014,"line_start":23,"line_end":23,"column_start":26,"column_end":29,"is_primary":false,"text":[{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":26,"highlight_end":29}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int32x2_t(i32, i32);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":1109,"byte_end":1112,"line_start":25,"line_end":25,"column_start":27,"column_end":30,"is_primary":false,"text":[{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":27,"highlight_end":30}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint32x2_t(u32, u32);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":1208,"byte_end":1211,"line_start":27,"line_end":27,"column_start":28,"column_end":31,"is_primary":false,"text":[{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":28,"highlight_end":31}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct float32x2_t(f32, f32);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":1305,"byte_end":1308,"line_start":29,"line_end":29,"column_start":26,"column_end":29,"is_primary":false,"text":[{"text":"    pub struct int64x1_t(i64);","highlight_start":26,"highlight_end":29}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int64x1_t(i64);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":1398,"byte_end":1401,"line_start":31,"line_end":31,"column_start":27,"column_end":30,"is_primary":false,"text":[{"text":"    pub struct uint64x1_t(u64);","highlight_start":27,"highlight_end":30}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x1_t(u64);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":1504,"byte_end":1506,"line_start":35,"line_end":35,"column_start":9,"column_end":11,"is_primary":false,"text":[{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":9,"highlight_end":11}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        i8, i8 ,i8, i8, i8, i8 ,i8, i8,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":1683,"byte_end":1685,"line_start":40,"line_end":40,"column_start":9,"column_end":11,"is_primary":false,"text":[{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":9,"highlight_end":11}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        u8, u8 ,u8, u8, u8, u8 ,u8, u8,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":1862,"byte_end":1864,"line_start":45,"line_end":45,"column_start":9,"column_end":11,"is_primary":false,"text":[{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":9,"highlight_end":11}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        u8, u8, u8, u8, u8, u8, u8, u8,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":2029,"byte_end":2032,"line_start":49,"line_end":49,"column_start":26,"column_end":29,"is_primary":false,"text":[{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":26,"highlight_end":29}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":2160,"byte_end":2163,"line_start":51,"line_end":51,"column_start":27,"column_end":30,"is_primary":false,"text":[{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":27,"highlight_end":30}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":2427,"byte_end":2430,"line_start":55,"line_end":55,"column_start":27,"column_end":30,"is_primary":false,"text":[{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":27,"highlight_end":30}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":2556,"byte_end":2559,"line_start":57,"line_end":57,"column_start":26,"column_end":29,"is_primary":false,"text":[{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":26,"highlight_end":29}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int32x4_t(i32, i32, i32, i32);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":2666,"byte_end":2669,"line_start":59,"line_end":59,"column_start":27,"column_end":30,"is_primary":false,"text":[{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":27,"highlight_end":30}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint32x4_t(u32, u32, u32, u32);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":2777,"byte_end":2780,"line_start":61,"line_end":61,"column_start":28,"column_end":31,"is_primary":false,"text":[{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":28,"highlight_end":31}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct float32x4_t(f32, f32, f32, f32);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":2885,"byte_end":2888,"line_start":63,"line_end":63,"column_start":26,"column_end":29,"is_primary":false,"text":[{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":26,"highlight_end":29}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int64x2_t(i64, i64);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 128-bit wide vector of two packed `u64`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"SIMD vector's only field must be an array","code":{"code":"E0076","explanation":"The type of the field in a tuple struct isn't an array when using the `#[simd]`\nattribute.\n\nErroneous code example:\n\n```compile_fail,E0076\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Bad(u16); // error!\n```\n\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\nstructs, if you want a single-lane vector then the field must be a 1-element\narray, or the compiler will trigger this error.\n\nFixed example:\n\n```\n#![feature(repr_simd)]\n\n#[repr(simd)]\nstruct Good([u16; 1]); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":2984,"byte_end":2987,"line_start":65,"line_end":65,"column_start":27,"column_end":30,"is_primary":false,"text":[{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":27,"highlight_end":30}],"label":"not an array","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0076]\u001b[0m\u001b[0m\u001b[1m: SIMD vector's only field must be an array\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot an array\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of moved value: `c`","code":{"code":"E0382","explanation":"A variable was used after its contents have been moved elsewhere.\n\nErroneous code example:\n\n```compile_fail,E0382\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = MyStruct{ s: 5u32 };\n    let y = x;\n    x.s = 6;\n    println!(\"{}\", x.s);\n}\n```\n\nSince `MyStruct` is a type that is not marked `Copy`, the data gets moved out\nof `x` when we set `y`. This is fundamental to Rust's ownership system: outside\nof workarounds like `Rc`, a value cannot be owned by more than one variable.\n\nSometimes we don't need to move the value. Using a reference, we can let another\nfunction borrow the value without changing its ownership. In the example below,\nwe don't actually have to move our string to `calculate_length`, we can give it\na reference to it with `&` instead.\n\n```\nfn main() {\n    let s1 = String::from(\"hello\");\n\n    let len = calculate_length(&s1);\n\n    println!(\"The length of '{}' is {}.\", s1, len);\n}\n\nfn calculate_length(s: &String) -> usize {\n    s.len()\n}\n```\n\nA mutable reference can be created with `&mut`.\n\nSometimes we don't want a reference, but a duplicate. All types marked `Clone`\ncan be duplicated by calling `.clone()`. Subsequent changes to a clone do not\naffect the original variable.\n\nMost types in the standard library are marked `Clone`. The example below\ndemonstrates using `clone()` on a string. `s1` is first set to \"many\", and then\ncopied to `s2`. Then the first character of `s1` is removed, without affecting\n`s2`. \"any many\" is printed to the console.\n\n```\nfn main() {\n    let mut s1 = String::from(\"many\");\n    let s2 = s1.clone();\n    s1.remove(0);\n    println!(\"{} {}\", s1, s2);\n}\n```\n\nIf we control the definition of a type, we can implement `Clone` on it ourselves\nwith `#[derive(Clone)]`.\n\nSome types have no ownership semantics at all and are trivial to duplicate. An\nexample is `i32` and the other number types. We don't have to call `.clone()` to\nclone them, because they are marked `Copy` in addition to `Clone`. Implicit\ncloning is more convenient in this case. We can mark our own types `Copy` if\nall their members also are marked `Copy`.\n\nIn the example below, we implement a `Point` type. Because it only stores two\nintegers, we opt-out of ownership semantics with `Copy`. Then we can\n`let p2 = p1` without `p1` being moved.\n\n```\n#[derive(Copy, Clone)]\nstruct Point { x: i32, y: i32 }\n\nfn main() {\n    let mut p1 = Point{ x: -1, y: 2 };\n    let p2 = p1;\n    p1.x = 1;\n    println!(\"p1: {}, {}\", p1.x, p1.y);\n    println!(\"p2: {}, {}\", p2.x, p2.y);\n}\n```\n\nAlternatively, if we don't control the struct's definition, or mutable shared\nownership is truly required, we can use `Rc` and `RefCell`:\n\n```\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = Rc::new(RefCell::new(MyStruct{ s: 5u32 }));\n    let y = x.clone();\n    x.borrow_mut().s = 6;\n    println!(\"{}\", x.borrow().s);\n}\n```\n\nWith this approach, x and y share ownership of the data via the `Rc` (reference\ncount type). `RefCell` essentially performs runtime borrow checking: ensuring\nthat at most one writer or multiple readers can access the data at any one time.\n\nIf you wish to learn more about ownership in Rust, start with the\n[Understanding Ownership][understanding-ownership] chapter in the Book.\n\n[understanding-ownership]: https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":25997,"byte_end":25998,"line_start":899,"line_end":899,"column_start":76,"column_end":77,"is_primary":false,"text":[{"text":"    let r = vqtbx1_s8(a, vcombine_s8(b, ::mem::zeroed()), ::mem::transmute(c));","highlight_start":76,"highlight_end":77}],"label":"value moved here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":26032,"byte_end":26033,"line_start":900,"line_end":900,"column_start":31,"column_end":32,"is_primary":true,"text":[{"text":"    let m: int8x8_t = simd_lt(c, ::mem::transmute(i8x8::splat(8)));","highlight_start":31,"highlight_end":32}],"label":"value used here after move","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":25865,"byte_end":25866,"line_start":897,"line_end":897,"column_start":50,"column_end":51,"is_primary":false,"text":[{"text":"pub unsafe fn vtbx1_s8(a: int8x8_t, b: int8x8_t, c: int8x8_t) -> int8x8_t {","highlight_start":50,"highlight_end":51}],"label":"move occurs because `c` has type `arm::neon::int8x8_t`, which does not implement the `Copy` trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if `arm::neon::int8x8_t` implemented `Clone`, you could clone the value","code":null,"level":"note","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":"consider implementing `Clone` for this type","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":25997,"byte_end":25998,"line_start":899,"line_end":899,"column_start":76,"column_end":77,"is_primary":false,"text":[{"text":"    let r = vqtbx1_s8(a, vcombine_s8(b, ::mem::zeroed()), ::mem::transmute(c));","highlight_start":76,"highlight_end":77}],"label":"you could clone this value","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0382]\u001b[0m\u001b[0m\u001b[1m: use of moved value: `c`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:900:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m897\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub unsafe fn vtbx1_s8(a: int8x8_t, b: int8x8_t, c: int8x8_t) -> int8x8_t {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmove occurs because `c` has type `arm::neon::int8x8_t`, which does not implement the `Copy` trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m898\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use coresimd::simd::i8x8;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m899\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let r = vqtbx1_s8(a, vcombine_s8(b, ::mem::zeroed()), ::mem::transmute(c));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mvalue moved here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m900\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let m: int8x8_t = simd_lt(c, ::mem::transmute(i8x8::splat(8)));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mvalue used here after move\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: if `arm::neon::int8x8_t` implemented `Clone`, you could clone the value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mconsider implementing `Clone` for this type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:899:76\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m899\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let r = vqtbx1_s8(a, vcombine_s8(b, ::mem::zeroed()), ::mem::transmute(c));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12myou could clone this value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of moved value: `a`","code":{"code":"E0382","explanation":"A variable was used after its contents have been moved elsewhere.\n\nErroneous code example:\n\n```compile_fail,E0382\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = MyStruct{ s: 5u32 };\n    let y = x;\n    x.s = 6;\n    println!(\"{}\", x.s);\n}\n```\n\nSince `MyStruct` is a type that is not marked `Copy`, the data gets moved out\nof `x` when we set `y`. This is fundamental to Rust's ownership system: outside\nof workarounds like `Rc`, a value cannot be owned by more than one variable.\n\nSometimes we don't need to move the value. Using a reference, we can let another\nfunction borrow the value without changing its ownership. In the example below,\nwe don't actually have to move our string to `calculate_length`, we can give it\na reference to it with `&` instead.\n\n```\nfn main() {\n    let s1 = String::from(\"hello\");\n\n    let len = calculate_length(&s1);\n\n    println!(\"The length of '{}' is {}.\", s1, len);\n}\n\nfn calculate_length(s: &String) -> usize {\n    s.len()\n}\n```\n\nA mutable reference can be created with `&mut`.\n\nSometimes we don't want a reference, but a duplicate. All types marked `Clone`\ncan be duplicated by calling `.clone()`. Subsequent changes to a clone do not\naffect the original variable.\n\nMost types in the standard library are marked `Clone`. The example below\ndemonstrates using `clone()` on a string. `s1` is first set to \"many\", and then\ncopied to `s2`. Then the first character of `s1` is removed, without affecting\n`s2`. \"any many\" is printed to the console.\n\n```\nfn main() {\n    let mut s1 = String::from(\"many\");\n    let s2 = s1.clone();\n    s1.remove(0);\n    println!(\"{} {}\", s1, s2);\n}\n```\n\nIf we control the definition of a type, we can implement `Clone` on it ourselves\nwith `#[derive(Clone)]`.\n\nSome types have no ownership semantics at all and are trivial to duplicate. An\nexample is `i32` and the other number types. We don't have to call `.clone()` to\nclone them, because they are marked `Copy` in addition to `Clone`. Implicit\ncloning is more convenient in this case. We can mark our own types `Copy` if\nall their members also are marked `Copy`.\n\nIn the example below, we implement a `Point` type. Because it only stores two\nintegers, we opt-out of ownership semantics with `Copy`. Then we can\n`let p2 = p1` without `p1` being moved.\n\n```\n#[derive(Copy, Clone)]\nstruct Point { x: i32, y: i32 }\n\nfn main() {\n    let mut p1 = Point{ x: -1, y: 2 };\n    let p2 = p1;\n    p1.x = 1;\n    println!(\"p1: {}, {}\", p1.x, p1.y);\n    println!(\"p2: {}, {}\", p2.x, p2.y);\n}\n```\n\nAlternatively, if we don't control the struct's definition, or mutable shared\nownership is truly required, we can use `Rc` and `RefCell`:\n\n```\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = Rc::new(RefCell::new(MyStruct{ s: 5u32 }));\n    let y = x.clone();\n    x.borrow_mut().s = 6;\n    println!(\"{}\", x.borrow().s);\n}\n```\n\nWith this approach, x and y share ownership of the data via the `Rc` (reference\ncount type). `RefCell` essentially performs runtime borrow checking: ensuring\nthat at most one writer or multiple readers can access the data at any one time.\n\nIf you wish to learn more about ownership in Rust, start with the\n[Understanding Ownership][understanding-ownership] chapter in the Book.\n\n[understanding-ownership]: https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":25944,"byte_end":25945,"line_start":899,"line_end":899,"column_start":23,"column_end":24,"is_primary":false,"text":[{"text":"    let r = vqtbx1_s8(a, vcombine_s8(b, ::mem::zeroed()), ::mem::transmute(c));","highlight_start":23,"highlight_end":24}],"label":"value moved here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":26092,"byte_end":26093,"line_start":901,"line_end":901,"column_start":23,"column_end":24,"is_primary":true,"text":[{"text":"    simd_select(m, r, a)","highlight_start":23,"highlight_end":24}],"label":"value used here after move","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":25839,"byte_end":25840,"line_start":897,"line_end":897,"column_start":24,"column_end":25,"is_primary":false,"text":[{"text":"pub unsafe fn vtbx1_s8(a: int8x8_t, b: int8x8_t, c: int8x8_t) -> int8x8_t {","highlight_start":24,"highlight_end":25}],"label":"move occurs because `a` has type `arm::neon::int8x8_t`, which does not implement the `Copy` trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider changing this parameter type in function `vqtbx1_s8` to borrow instead if owning the value isn't necessary","code":null,"level":"note","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":32015,"byte_end":32023,"line_start":1108,"line_end":1108,"column_start":8,"column_end":16,"is_primary":true,"text":[{"text":"    a: int8x8_t, t: int8x16_t, idx: uint8x8_t,","highlight_start":8,"highlight_end":16}],"label":"this parameter takes ownership of the value","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":31997,"byte_end":32006,"line_start":1107,"line_end":1107,"column_start":15,"column_end":24,"is_primary":false,"text":[{"text":"pub unsafe fn vqtbx1_s8(","highlight_start":15,"highlight_end":24}],"label":"in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"if `arm::neon::int8x8_t` implemented `Clone`, you could clone the value","code":null,"level":"note","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":"consider implementing `Clone` for this type","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":25944,"byte_end":25945,"line_start":899,"line_end":899,"column_start":23,"column_end":24,"is_primary":false,"text":[{"text":"    let r = vqtbx1_s8(a, vcombine_s8(b, ::mem::zeroed()), ::mem::transmute(c));","highlight_start":23,"highlight_end":24}],"label":"you could clone this value","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0382]\u001b[0m\u001b[0m\u001b[1m: use of moved value: `a`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:901:23\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m897\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub unsafe fn vtbx1_s8(a: int8x8_t, b: int8x8_t, c: int8x8_t) -> int8x8_t {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmove occurs because `a` has type `arm::neon::int8x8_t`, which does not implement the `Copy` trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m898\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use coresimd::simd::i8x8;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m899\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let r = vqtbx1_s8(a, vcombine_s8(b, ::mem::zeroed()), ::mem::transmute(c));\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mvalue moved here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m900\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let m: int8x8_t = simd_lt(c, ::mem::transmute(i8x8::splat(8)));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m901\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    simd_select(m, r, a)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mvalue used here after move\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: consider changing this parameter type in function `vqtbx1_s8` to borrow instead if owning the value isn't necessary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:1108:8\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub unsafe fn vqtbx1_s8(\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1108\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    a: int8x8_t, t: int8x16_t, idx: uint8x8_t,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis parameter takes ownership of the value\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: if `arm::neon::int8x8_t` implemented `Clone`, you could clone the value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mconsider implementing `Clone` for this type\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:899:23\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m899\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let r = vqtbx1_s8(a, vcombine_s8(b, ::mem::zeroed()), ::mem::transmute(c));\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12myou could clone this value\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of moved value: `c`","code":{"code":"E0382","explanation":"A variable was used after its contents have been moved elsewhere.\n\nErroneous code example:\n\n```compile_fail,E0382\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = MyStruct{ s: 5u32 };\n    let y = x;\n    x.s = 6;\n    println!(\"{}\", x.s);\n}\n```\n\nSince `MyStruct` is a type that is not marked `Copy`, the data gets moved out\nof `x` when we set `y`. This is fundamental to Rust's ownership system: outside\nof workarounds like `Rc`, a value cannot be owned by more than one variable.\n\nSometimes we don't need to move the value. Using a reference, we can let another\nfunction borrow the value without changing its ownership. In the example below,\nwe don't actually have to move our string to `calculate_length`, we can give it\na reference to it with `&` instead.\n\n```\nfn main() {\n    let s1 = String::from(\"hello\");\n\n    let len = calculate_length(&s1);\n\n    println!(\"The length of '{}' is {}.\", s1, len);\n}\n\nfn calculate_length(s: &String) -> usize {\n    s.len()\n}\n```\n\nA mutable reference can be created with `&mut`.\n\nSometimes we don't want a reference, but a duplicate. All types marked `Clone`\ncan be duplicated by calling `.clone()`. Subsequent changes to a clone do not\naffect the original variable.\n\nMost types in the standard library are marked `Clone`. The example below\ndemonstrates using `clone()` on a string. `s1` is first set to \"many\", and then\ncopied to `s2`. Then the first character of `s1` is removed, without affecting\n`s2`. \"any many\" is printed to the console.\n\n```\nfn main() {\n    let mut s1 = String::from(\"many\");\n    let s2 = s1.clone();\n    s1.remove(0);\n    println!(\"{} {}\", s1, s2);\n}\n```\n\nIf we control the definition of a type, we can implement `Clone` on it ourselves\nwith `#[derive(Clone)]`.\n\nSome types have no ownership semantics at all and are trivial to duplicate. An\nexample is `i32` and the other number types. We don't have to call `.clone()` to\nclone them, because they are marked `Copy` in addition to `Clone`. Implicit\ncloning is more convenient in this case. We can mark our own types `Copy` if\nall their members also are marked `Copy`.\n\nIn the example below, we implement a `Point` type. Because it only stores two\nintegers, we opt-out of ownership semantics with `Copy`. Then we can\n`let p2 = p1` without `p1` being moved.\n\n```\n#[derive(Copy, Clone)]\nstruct Point { x: i32, y: i32 }\n\nfn main() {\n    let mut p1 = Point{ x: -1, y: 2 };\n    let p2 = p1;\n    p1.x = 1;\n    println!(\"p1: {}, {}\", p1.x, p1.y);\n    println!(\"p2: {}, {}\", p2.x, p2.y);\n}\n```\n\nAlternatively, if we don't control the struct's definition, or mutable shared\nownership is truly required, we can use `Rc` and `RefCell`:\n\n```\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = Rc::new(RefCell::new(MyStruct{ s: 5u32 }));\n    let y = x.clone();\n    x.borrow_mut().s = 6;\n    println!(\"{}\", x.borrow().s);\n}\n```\n\nWith this approach, x and y share ownership of the data via the `Rc` (reference\ncount type). `RefCell` essentially performs runtime borrow checking: ensuring\nthat at most one writer or multiple readers can access the data at any one time.\n\nIf you wish to learn more about ownership in Rust, start with the\n[Understanding Ownership][understanding-ownership] chapter in the Book.\n\n[understanding-ownership]: https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":26408,"byte_end":26409,"line_start":911,"line_end":911,"column_start":59,"column_end":60,"is_primary":false,"text":[{"text":"    let r = vqtbx1_u8(a, vcombine_u8(b, ::mem::zeroed()), c);","highlight_start":59,"highlight_end":60}],"label":"value moved here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":26442,"byte_end":26443,"line_start":912,"line_end":912,"column_start":31,"column_end":32,"is_primary":true,"text":[{"text":"    let m: int8x8_t = simd_lt(c, ::mem::transmute(u8x8::splat(8)));","highlight_start":31,"highlight_end":32}],"label":"value used here after move","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":26291,"byte_end":26292,"line_start":909,"line_end":909,"column_start":52,"column_end":53,"is_primary":false,"text":[{"text":"pub unsafe fn vtbx1_u8(a: uint8x8_t, b: uint8x8_t, c: uint8x8_t) -> uint8x8_t {","highlight_start":52,"highlight_end":53}],"label":"move occurs because `c` has type `arm::neon::uint8x8_t`, which does not implement the `Copy` trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider changing this parameter type in function `vqtbx1_u8` to borrow instead if owning the value isn't necessary","code":null,"level":"note","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":32559,"byte_end":32568,"line_start":1128,"line_end":1128,"column_start":39,"column_end":48,"is_primary":true,"text":[{"text":"    a: uint8x8_t, t: uint8x16_t, idx: uint8x8_t,","highlight_start":39,"highlight_end":48}],"label":"this parameter takes ownership of the value","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":32510,"byte_end":32519,"line_start":1127,"line_end":1127,"column_start":15,"column_end":24,"is_primary":false,"text":[{"text":"pub unsafe fn vqtbx1_u8(","highlight_start":15,"highlight_end":24}],"label":"in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"if `arm::neon::uint8x8_t` implemented `Clone`, you could clone the value","code":null,"level":"note","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":"consider implementing `Clone` for this type","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":26408,"byte_end":26409,"line_start":911,"line_end":911,"column_start":59,"column_end":60,"is_primary":false,"text":[{"text":"    let r = vqtbx1_u8(a, vcombine_u8(b, ::mem::zeroed()), c);","highlight_start":59,"highlight_end":60}],"label":"you could clone this value","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0382]\u001b[0m\u001b[0m\u001b[1m: use of moved value: `c`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:912:31\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m909\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub unsafe fn vtbx1_u8(a: uint8x8_t, b: uint8x8_t, c: uint8x8_t) -> uint8x8_t {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmove occurs because `c` has type `arm::neon::uint8x8_t`, which does not implement the `Copy` trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m910\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use coresimd::simd::u8x8;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m911\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let r = vqtbx1_u8(a, vcombine_u8(b, ::mem::zeroed()), c);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mvalue moved here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m912\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let m: int8x8_t = simd_lt(c, ::mem::transmute(u8x8::splat(8)));\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mvalue used here after move\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: consider changing this parameter type in function `vqtbx1_u8` to borrow instead if owning the value isn't necessary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:1128:39\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub unsafe fn vqtbx1_u8(\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    a: uint8x8_t, t: uint8x16_t, idx: uint8x8_t,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis parameter takes ownership of the value\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: if `arm::neon::uint8x8_t` implemented `Clone`, you could clone the value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mconsider implementing `Clone` for this type\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:911:59\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m911\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let r = vqtbx1_u8(a, vcombine_u8(b, ::mem::zeroed()), c);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12myou could clone this value\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of moved value: `a`","code":{"code":"E0382","explanation":"A variable was used after its contents have been moved elsewhere.\n\nErroneous code example:\n\n```compile_fail,E0382\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = MyStruct{ s: 5u32 };\n    let y = x;\n    x.s = 6;\n    println!(\"{}\", x.s);\n}\n```\n\nSince `MyStruct` is a type that is not marked `Copy`, the data gets moved out\nof `x` when we set `y`. This is fundamental to Rust's ownership system: outside\nof workarounds like `Rc`, a value cannot be owned by more than one variable.\n\nSometimes we don't need to move the value. Using a reference, we can let another\nfunction borrow the value without changing its ownership. In the example below,\nwe don't actually have to move our string to `calculate_length`, we can give it\na reference to it with `&` instead.\n\n```\nfn main() {\n    let s1 = String::from(\"hello\");\n\n    let len = calculate_length(&s1);\n\n    println!(\"The length of '{}' is {}.\", s1, len);\n}\n\nfn calculate_length(s: &String) -> usize {\n    s.len()\n}\n```\n\nA mutable reference can be created with `&mut`.\n\nSometimes we don't want a reference, but a duplicate. All types marked `Clone`\ncan be duplicated by calling `.clone()`. Subsequent changes to a clone do not\naffect the original variable.\n\nMost types in the standard library are marked `Clone`. The example below\ndemonstrates using `clone()` on a string. `s1` is first set to \"many\", and then\ncopied to `s2`. Then the first character of `s1` is removed, without affecting\n`s2`. \"any many\" is printed to the console.\n\n```\nfn main() {\n    let mut s1 = String::from(\"many\");\n    let s2 = s1.clone();\n    s1.remove(0);\n    println!(\"{} {}\", s1, s2);\n}\n```\n\nIf we control the definition of a type, we can implement `Clone` on it ourselves\nwith `#[derive(Clone)]`.\n\nSome types have no ownership semantics at all and are trivial to duplicate. An\nexample is `i32` and the other number types. We don't have to call `.clone()` to\nclone them, because they are marked `Copy` in addition to `Clone`. Implicit\ncloning is more convenient in this case. We can mark our own types `Copy` if\nall their members also are marked `Copy`.\n\nIn the example below, we implement a `Point` type. Because it only stores two\nintegers, we opt-out of ownership semantics with `Copy`. Then we can\n`let p2 = p1` without `p1` being moved.\n\n```\n#[derive(Copy, Clone)]\nstruct Point { x: i32, y: i32 }\n\nfn main() {\n    let mut p1 = Point{ x: -1, y: 2 };\n    let p2 = p1;\n    p1.x = 1;\n    println!(\"p1: {}, {}\", p1.x, p1.y);\n    println!(\"p2: {}, {}\", p2.x, p2.y);\n}\n```\n\nAlternatively, if we don't control the struct's definition, or mutable shared\nownership is truly required, we can use `Rc` and `RefCell`:\n\n```\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = Rc::new(RefCell::new(MyStruct{ s: 5u32 }));\n    let y = x.clone();\n    x.borrow_mut().s = 6;\n    println!(\"{}\", x.borrow().s);\n}\n```\n\nWith this approach, x and y share ownership of the data via the `Rc` (reference\ncount type). `RefCell` essentially performs runtime borrow checking: ensuring\nthat at most one writer or multiple readers can access the data at any one time.\n\nIf you wish to learn more about ownership in Rust, start with the\n[Understanding Ownership][understanding-ownership] chapter in the Book.\n\n[understanding-ownership]: https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":26372,"byte_end":26373,"line_start":911,"line_end":911,"column_start":23,"column_end":24,"is_primary":false,"text":[{"text":"    let r = vqtbx1_u8(a, vcombine_u8(b, ::mem::zeroed()), c);","highlight_start":23,"highlight_end":24}],"label":"value moved here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":26502,"byte_end":26503,"line_start":913,"line_end":913,"column_start":23,"column_end":24,"is_primary":true,"text":[{"text":"    simd_select(m, r, a)","highlight_start":23,"highlight_end":24}],"label":"value used here after move","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":26263,"byte_end":26264,"line_start":909,"line_end":909,"column_start":24,"column_end":25,"is_primary":false,"text":[{"text":"pub unsafe fn vtbx1_u8(a: uint8x8_t, b: uint8x8_t, c: uint8x8_t) -> uint8x8_t {","highlight_start":24,"highlight_end":25}],"label":"move occurs because `a` has type `arm::neon::uint8x8_t`, which does not implement the `Copy` trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider changing this parameter type in function `vqtbx1_u8` to borrow instead if owning the value isn't necessary","code":null,"level":"note","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":32528,"byte_end":32537,"line_start":1128,"line_end":1128,"column_start":8,"column_end":17,"is_primary":true,"text":[{"text":"    a: uint8x8_t, t: uint8x16_t, idx: uint8x8_t,","highlight_start":8,"highlight_end":17}],"label":"this parameter takes ownership of the value","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":32510,"byte_end":32519,"line_start":1127,"line_end":1127,"column_start":15,"column_end":24,"is_primary":false,"text":[{"text":"pub unsafe fn vqtbx1_u8(","highlight_start":15,"highlight_end":24}],"label":"in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"if `arm::neon::uint8x8_t` implemented `Clone`, you could clone the value","code":null,"level":"note","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":"consider implementing `Clone` for this type","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":26372,"byte_end":26373,"line_start":911,"line_end":911,"column_start":23,"column_end":24,"is_primary":false,"text":[{"text":"    let r = vqtbx1_u8(a, vcombine_u8(b, ::mem::zeroed()), c);","highlight_start":23,"highlight_end":24}],"label":"you could clone this value","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0382]\u001b[0m\u001b[0m\u001b[1m: use of moved value: `a`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:913:23\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m909\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub unsafe fn vtbx1_u8(a: uint8x8_t, b: uint8x8_t, c: uint8x8_t) -> uint8x8_t {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmove occurs because `a` has type `arm::neon::uint8x8_t`, which does not implement the `Copy` trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m910\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use coresimd::simd::u8x8;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m911\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let r = vqtbx1_u8(a, vcombine_u8(b, ::mem::zeroed()), c);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mvalue moved here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m912\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let m: int8x8_t = simd_lt(c, ::mem::transmute(u8x8::splat(8)));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m913\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    simd_select(m, r, a)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mvalue used here after move\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: consider changing this parameter type in function `vqtbx1_u8` to borrow instead if owning the value isn't necessary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:1128:8\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub unsafe fn vqtbx1_u8(\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    a: uint8x8_t, t: uint8x16_t, idx: uint8x8_t,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis parameter takes ownership of the value\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: if `arm::neon::uint8x8_t` implemented `Clone`, you could clone the value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mconsider implementing `Clone` for this type\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:911:23\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m911\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let r = vqtbx1_u8(a, vcombine_u8(b, ::mem::zeroed()), c);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12myou could clone this value\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of moved value: `c`","code":{"code":"E0382","explanation":"A variable was used after its contents have been moved elsewhere.\n\nErroneous code example:\n\n```compile_fail,E0382\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = MyStruct{ s: 5u32 };\n    let y = x;\n    x.s = 6;\n    println!(\"{}\", x.s);\n}\n```\n\nSince `MyStruct` is a type that is not marked `Copy`, the data gets moved out\nof `x` when we set `y`. This is fundamental to Rust's ownership system: outside\nof workarounds like `Rc`, a value cannot be owned by more than one variable.\n\nSometimes we don't need to move the value. Using a reference, we can let another\nfunction borrow the value without changing its ownership. In the example below,\nwe don't actually have to move our string to `calculate_length`, we can give it\na reference to it with `&` instead.\n\n```\nfn main() {\n    let s1 = String::from(\"hello\");\n\n    let len = calculate_length(&s1);\n\n    println!(\"The length of '{}' is {}.\", s1, len);\n}\n\nfn calculate_length(s: &String) -> usize {\n    s.len()\n}\n```\n\nA mutable reference can be created with `&mut`.\n\nSometimes we don't want a reference, but a duplicate. All types marked `Clone`\ncan be duplicated by calling `.clone()`. Subsequent changes to a clone do not\naffect the original variable.\n\nMost types in the standard library are marked `Clone`. The example below\ndemonstrates using `clone()` on a string. `s1` is first set to \"many\", and then\ncopied to `s2`. Then the first character of `s1` is removed, without affecting\n`s2`. \"any many\" is printed to the console.\n\n```\nfn main() {\n    let mut s1 = String::from(\"many\");\n    let s2 = s1.clone();\n    s1.remove(0);\n    println!(\"{} {}\", s1, s2);\n}\n```\n\nIf we control the definition of a type, we can implement `Clone` on it ourselves\nwith `#[derive(Clone)]`.\n\nSome types have no ownership semantics at all and are trivial to duplicate. An\nexample is `i32` and the other number types. We don't have to call `.clone()` to\nclone them, because they are marked `Copy` in addition to `Clone`. Implicit\ncloning is more convenient in this case. We can mark our own types `Copy` if\nall their members also are marked `Copy`.\n\nIn the example below, we implement a `Point` type. Because it only stores two\nintegers, we opt-out of ownership semantics with `Copy`. Then we can\n`let p2 = p1` without `p1` being moved.\n\n```\n#[derive(Copy, Clone)]\nstruct Point { x: i32, y: i32 }\n\nfn main() {\n    let mut p1 = Point{ x: -1, y: 2 };\n    let p2 = p1;\n    p1.x = 1;\n    println!(\"p1: {}, {}\", p1.x, p1.y);\n    println!(\"p2: {}, {}\", p2.x, p2.y);\n}\n```\n\nAlternatively, if we don't control the struct's definition, or mutable shared\nownership is truly required, we can use `Rc` and `RefCell`:\n\n```\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = Rc::new(RefCell::new(MyStruct{ s: 5u32 }));\n    let y = x.clone();\n    x.borrow_mut().s = 6;\n    println!(\"{}\", x.borrow().s);\n}\n```\n\nWith this approach, x and y share ownership of the data via the `Rc` (reference\ncount type). `RefCell` essentially performs runtime borrow checking: ensuring\nthat at most one writer or multiple readers can access the data at any one time.\n\nIf you wish to learn more about ownership in Rust, start with the\n[Understanding Ownership][understanding-ownership] chapter in the Book.\n\n[understanding-ownership]: https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":26818,"byte_end":26819,"line_start":923,"line_end":923,"column_start":59,"column_end":60,"is_primary":false,"text":[{"text":"    let r = vqtbx1_p8(a, vcombine_p8(b, ::mem::zeroed()), c);","highlight_start":59,"highlight_end":60}],"label":"value moved here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":26852,"byte_end":26853,"line_start":924,"line_end":924,"column_start":31,"column_end":32,"is_primary":true,"text":[{"text":"    let m: int8x8_t = simd_lt(c, ::mem::transmute(u8x8::splat(8)));","highlight_start":31,"highlight_end":32}],"label":"value used here after move","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":26701,"byte_end":26702,"line_start":921,"line_end":921,"column_start":52,"column_end":53,"is_primary":false,"text":[{"text":"pub unsafe fn vtbx1_p8(a: poly8x8_t, b: poly8x8_t, c: uint8x8_t) -> poly8x8_t {","highlight_start":52,"highlight_end":53}],"label":"move occurs because `c` has type `arm::neon::uint8x8_t`, which does not implement the `Copy` trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider changing this parameter type in function `vqtbx1_p8` to borrow instead if owning the value isn't necessary","code":null,"level":"note","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":33284,"byte_end":33293,"line_start":1156,"line_end":1156,"column_start":39,"column_end":48,"is_primary":true,"text":[{"text":"    a: poly8x8_t, t: poly8x16_t, idx: uint8x8_t,","highlight_start":39,"highlight_end":48}],"label":"this parameter takes ownership of the value","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":33235,"byte_end":33244,"line_start":1155,"line_end":1155,"column_start":15,"column_end":24,"is_primary":false,"text":[{"text":"pub unsafe fn vqtbx1_p8(","highlight_start":15,"highlight_end":24}],"label":"in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"if `arm::neon::uint8x8_t` implemented `Clone`, you could clone the value","code":null,"level":"note","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":"consider implementing `Clone` for this type","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":26818,"byte_end":26819,"line_start":923,"line_end":923,"column_start":59,"column_end":60,"is_primary":false,"text":[{"text":"    let r = vqtbx1_p8(a, vcombine_p8(b, ::mem::zeroed()), c);","highlight_start":59,"highlight_end":60}],"label":"you could clone this value","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0382]\u001b[0m\u001b[0m\u001b[1m: use of moved value: `c`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:924:31\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m921\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub unsafe fn vtbx1_p8(a: poly8x8_t, b: poly8x8_t, c: uint8x8_t) -> poly8x8_t {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmove occurs because `c` has type `arm::neon::uint8x8_t`, which does not implement the `Copy` trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m922\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use coresimd::simd::u8x8;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m923\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let r = vqtbx1_p8(a, vcombine_p8(b, ::mem::zeroed()), c);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mvalue moved here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m924\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let m: int8x8_t = simd_lt(c, ::mem::transmute(u8x8::splat(8)));\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mvalue used here after move\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: consider changing this parameter type in function `vqtbx1_p8` to borrow instead if owning the value isn't necessary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:1156:39\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub unsafe fn vqtbx1_p8(\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    a: poly8x8_t, t: poly8x16_t, idx: uint8x8_t,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis parameter takes ownership of the value\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: if `arm::neon::uint8x8_t` implemented `Clone`, you could clone the value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mconsider implementing `Clone` for this type\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:923:59\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m923\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let r = vqtbx1_p8(a, vcombine_p8(b, ::mem::zeroed()), c);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12myou could clone this value\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of moved value: `a`","code":{"code":"E0382","explanation":"A variable was used after its contents have been moved elsewhere.\n\nErroneous code example:\n\n```compile_fail,E0382\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = MyStruct{ s: 5u32 };\n    let y = x;\n    x.s = 6;\n    println!(\"{}\", x.s);\n}\n```\n\nSince `MyStruct` is a type that is not marked `Copy`, the data gets moved out\nof `x` when we set `y`. This is fundamental to Rust's ownership system: outside\nof workarounds like `Rc`, a value cannot be owned by more than one variable.\n\nSometimes we don't need to move the value. Using a reference, we can let another\nfunction borrow the value without changing its ownership. In the example below,\nwe don't actually have to move our string to `calculate_length`, we can give it\na reference to it with `&` instead.\n\n```\nfn main() {\n    let s1 = String::from(\"hello\");\n\n    let len = calculate_length(&s1);\n\n    println!(\"The length of '{}' is {}.\", s1, len);\n}\n\nfn calculate_length(s: &String) -> usize {\n    s.len()\n}\n```\n\nA mutable reference can be created with `&mut`.\n\nSometimes we don't want a reference, but a duplicate. All types marked `Clone`\ncan be duplicated by calling `.clone()`. Subsequent changes to a clone do not\naffect the original variable.\n\nMost types in the standard library are marked `Clone`. The example below\ndemonstrates using `clone()` on a string. `s1` is first set to \"many\", and then\ncopied to `s2`. Then the first character of `s1` is removed, without affecting\n`s2`. \"any many\" is printed to the console.\n\n```\nfn main() {\n    let mut s1 = String::from(\"many\");\n    let s2 = s1.clone();\n    s1.remove(0);\n    println!(\"{} {}\", s1, s2);\n}\n```\n\nIf we control the definition of a type, we can implement `Clone` on it ourselves\nwith `#[derive(Clone)]`.\n\nSome types have no ownership semantics at all and are trivial to duplicate. An\nexample is `i32` and the other number types. We don't have to call `.clone()` to\nclone them, because they are marked `Copy` in addition to `Clone`. Implicit\ncloning is more convenient in this case. We can mark our own types `Copy` if\nall their members also are marked `Copy`.\n\nIn the example below, we implement a `Point` type. Because it only stores two\nintegers, we opt-out of ownership semantics with `Copy`. Then we can\n`let p2 = p1` without `p1` being moved.\n\n```\n#[derive(Copy, Clone)]\nstruct Point { x: i32, y: i32 }\n\nfn main() {\n    let mut p1 = Point{ x: -1, y: 2 };\n    let p2 = p1;\n    p1.x = 1;\n    println!(\"p1: {}, {}\", p1.x, p1.y);\n    println!(\"p2: {}, {}\", p2.x, p2.y);\n}\n```\n\nAlternatively, if we don't control the struct's definition, or mutable shared\nownership is truly required, we can use `Rc` and `RefCell`:\n\n```\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = Rc::new(RefCell::new(MyStruct{ s: 5u32 }));\n    let y = x.clone();\n    x.borrow_mut().s = 6;\n    println!(\"{}\", x.borrow().s);\n}\n```\n\nWith this approach, x and y share ownership of the data via the `Rc` (reference\ncount type). `RefCell` essentially performs runtime borrow checking: ensuring\nthat at most one writer or multiple readers can access the data at any one time.\n\nIf you wish to learn more about ownership in Rust, start with the\n[Understanding Ownership][understanding-ownership] chapter in the Book.\n\n[understanding-ownership]: https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":26782,"byte_end":26783,"line_start":923,"line_end":923,"column_start":23,"column_end":24,"is_primary":false,"text":[{"text":"    let r = vqtbx1_p8(a, vcombine_p8(b, ::mem::zeroed()), c);","highlight_start":23,"highlight_end":24}],"label":"value moved here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":26912,"byte_end":26913,"line_start":925,"line_end":925,"column_start":23,"column_end":24,"is_primary":true,"text":[{"text":"    simd_select(m, r, a)","highlight_start":23,"highlight_end":24}],"label":"value used here after move","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":26673,"byte_end":26674,"line_start":921,"line_end":921,"column_start":24,"column_end":25,"is_primary":false,"text":[{"text":"pub unsafe fn vtbx1_p8(a: poly8x8_t, b: poly8x8_t, c: uint8x8_t) -> poly8x8_t {","highlight_start":24,"highlight_end":25}],"label":"move occurs because `a` has type `arm::neon::poly8x8_t`, which does not implement the `Copy` trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider changing this parameter type in function `vqtbx1_p8` to borrow instead if owning the value isn't necessary","code":null,"level":"note","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":33253,"byte_end":33262,"line_start":1156,"line_end":1156,"column_start":8,"column_end":17,"is_primary":true,"text":[{"text":"    a: poly8x8_t, t: poly8x16_t, idx: uint8x8_t,","highlight_start":8,"highlight_end":17}],"label":"this parameter takes ownership of the value","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":33235,"byte_end":33244,"line_start":1155,"line_end":1155,"column_start":15,"column_end":24,"is_primary":false,"text":[{"text":"pub unsafe fn vqtbx1_p8(","highlight_start":15,"highlight_end":24}],"label":"in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"if `arm::neon::poly8x8_t` implemented `Clone`, you could clone the value","code":null,"level":"note","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":"consider implementing `Clone` for this type","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":26782,"byte_end":26783,"line_start":923,"line_end":923,"column_start":23,"column_end":24,"is_primary":false,"text":[{"text":"    let r = vqtbx1_p8(a, vcombine_p8(b, ::mem::zeroed()), c);","highlight_start":23,"highlight_end":24}],"label":"you could clone this value","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0382]\u001b[0m\u001b[0m\u001b[1m: use of moved value: `a`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:925:23\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m921\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub unsafe fn vtbx1_p8(a: poly8x8_t, b: poly8x8_t, c: uint8x8_t) -> poly8x8_t {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmove occurs because `a` has type `arm::neon::poly8x8_t`, which does not implement the `Copy` trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m922\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use coresimd::simd::u8x8;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m923\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let r = vqtbx1_p8(a, vcombine_p8(b, ::mem::zeroed()), c);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mvalue moved here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m924\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let m: int8x8_t = simd_lt(c, ::mem::transmute(u8x8::splat(8)));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m925\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    simd_select(m, r, a)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mvalue used here after move\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: consider changing this parameter type in function `vqtbx1_p8` to borrow instead if owning the value isn't necessary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:1156:8\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub unsafe fn vqtbx1_p8(\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    a: poly8x8_t, t: poly8x16_t, idx: uint8x8_t,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis parameter takes ownership of the value\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: if `arm::neon::poly8x8_t` implemented `Clone`, you could clone the value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mconsider implementing `Clone` for this type\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:923:23\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m923\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let r = vqtbx1_p8(a, vcombine_p8(b, ::mem::zeroed()), c);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12myou could clone this value\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of moved value: `c`","code":{"code":"E0382","explanation":"A variable was used after its contents have been moved elsewhere.\n\nErroneous code example:\n\n```compile_fail,E0382\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = MyStruct{ s: 5u32 };\n    let y = x;\n    x.s = 6;\n    println!(\"{}\", x.s);\n}\n```\n\nSince `MyStruct` is a type that is not marked `Copy`, the data gets moved out\nof `x` when we set `y`. This is fundamental to Rust's ownership system: outside\nof workarounds like `Rc`, a value cannot be owned by more than one variable.\n\nSometimes we don't need to move the value. Using a reference, we can let another\nfunction borrow the value without changing its ownership. In the example below,\nwe don't actually have to move our string to `calculate_length`, we can give it\na reference to it with `&` instead.\n\n```\nfn main() {\n    let s1 = String::from(\"hello\");\n\n    let len = calculate_length(&s1);\n\n    println!(\"The length of '{}' is {}.\", s1, len);\n}\n\nfn calculate_length(s: &String) -> usize {\n    s.len()\n}\n```\n\nA mutable reference can be created with `&mut`.\n\nSometimes we don't want a reference, but a duplicate. All types marked `Clone`\ncan be duplicated by calling `.clone()`. Subsequent changes to a clone do not\naffect the original variable.\n\nMost types in the standard library are marked `Clone`. The example below\ndemonstrates using `clone()` on a string. `s1` is first set to \"many\", and then\ncopied to `s2`. Then the first character of `s1` is removed, without affecting\n`s2`. \"any many\" is printed to the console.\n\n```\nfn main() {\n    let mut s1 = String::from(\"many\");\n    let s2 = s1.clone();\n    s1.remove(0);\n    println!(\"{} {}\", s1, s2);\n}\n```\n\nIf we control the definition of a type, we can implement `Clone` on it ourselves\nwith `#[derive(Clone)]`.\n\nSome types have no ownership semantics at all and are trivial to duplicate. An\nexample is `i32` and the other number types. We don't have to call `.clone()` to\nclone them, because they are marked `Copy` in addition to `Clone`. Implicit\ncloning is more convenient in this case. We can mark our own types `Copy` if\nall their members also are marked `Copy`.\n\nIn the example below, we implement a `Point` type. Because it only stores two\nintegers, we opt-out of ownership semantics with `Copy`. Then we can\n`let p2 = p1` without `p1` being moved.\n\n```\n#[derive(Copy, Clone)]\nstruct Point { x: i32, y: i32 }\n\nfn main() {\n    let mut p1 = Point{ x: -1, y: 2 };\n    let p2 = p1;\n    p1.x = 1;\n    println!(\"p1: {}, {}\", p1.x, p1.y);\n    println!(\"p2: {}, {}\", p2.x, p2.y);\n}\n```\n\nAlternatively, if we don't control the struct's definition, or mutable shared\nownership is truly required, we can use `Rc` and `RefCell`:\n\n```\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = Rc::new(RefCell::new(MyStruct{ s: 5u32 }));\n    let y = x.clone();\n    x.borrow_mut().s = 6;\n    println!(\"{}\", x.borrow().s);\n}\n```\n\nWith this approach, x and y share ownership of the data via the `Rc` (reference\ncount type). `RefCell` essentially performs runtime borrow checking: ensuring\nthat at most one writer or multiple readers can access the data at any one time.\n\nIf you wish to learn more about ownership in Rust, start with the\n[Understanding Ownership][understanding-ownership] chapter in the Book.\n\n[understanding-ownership]: https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":28144,"byte_end":28145,"line_start":969,"line_end":969,"column_start":26,"column_end":27,"is_primary":false,"text":[{"text":"        ::mem::transmute(c),","highlight_start":26,"highlight_end":27}],"label":"value moved here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":28185,"byte_end":28186,"line_start":971,"line_end":971,"column_start":31,"column_end":32,"is_primary":true,"text":[{"text":"    let m: int8x8_t = simd_lt(c, ::mem::transmute(i8x8::splat(24)));","highlight_start":31,"highlight_end":32}],"label":"value used here after move","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":27949,"byte_end":27950,"line_start":964,"line_end":964,"column_start":52,"column_end":53,"is_primary":false,"text":[{"text":"pub unsafe fn vtbx3_s8(a: int8x8_t, b: int8x8x3_t, c: int8x8_t) -> int8x8_t {","highlight_start":52,"highlight_end":53}],"label":"move occurs because `c` has type `arm::neon::int8x8_t`, which does not implement the `Copy` trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if `arm::neon::int8x8_t` implemented `Clone`, you could clone the value","code":null,"level":"note","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":"consider implementing `Clone` for this type","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":28144,"byte_end":28145,"line_start":969,"line_end":969,"column_start":26,"column_end":27,"is_primary":false,"text":[{"text":"        ::mem::transmute(c),","highlight_start":26,"highlight_end":27}],"label":"you could clone this value","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0382]\u001b[0m\u001b[0m\u001b[1m: use of moved value: `c`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:971:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m964\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub unsafe fn vtbx3_s8(a: int8x8_t, b: int8x8x3_t, c: int8x8_t) -> int8x8_t {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmove occurs because `c` has type `arm::neon::int8x8_t`, which does not implement the `Copy` trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m969\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ::mem::transmute(c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mvalue moved here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m970\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m971\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let m: int8x8_t = simd_lt(c, ::mem::transmute(i8x8::splat(24)));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mvalue used here after move\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: if `arm::neon::int8x8_t` implemented `Clone`, you could clone the value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mconsider implementing `Clone` for this type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:969:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m969\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        ::mem::transmute(c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12myou could clone this value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of moved value: `a`","code":{"code":"E0382","explanation":"A variable was used after its contents have been moved elsewhere.\n\nErroneous code example:\n\n```compile_fail,E0382\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = MyStruct{ s: 5u32 };\n    let y = x;\n    x.s = 6;\n    println!(\"{}\", x.s);\n}\n```\n\nSince `MyStruct` is a type that is not marked `Copy`, the data gets moved out\nof `x` when we set `y`. This is fundamental to Rust's ownership system: outside\nof workarounds like `Rc`, a value cannot be owned by more than one variable.\n\nSometimes we don't need to move the value. Using a reference, we can let another\nfunction borrow the value without changing its ownership. In the example below,\nwe don't actually have to move our string to `calculate_length`, we can give it\na reference to it with `&` instead.\n\n```\nfn main() {\n    let s1 = String::from(\"hello\");\n\n    let len = calculate_length(&s1);\n\n    println!(\"The length of '{}' is {}.\", s1, len);\n}\n\nfn calculate_length(s: &String) -> usize {\n    s.len()\n}\n```\n\nA mutable reference can be created with `&mut`.\n\nSometimes we don't want a reference, but a duplicate. All types marked `Clone`\ncan be duplicated by calling `.clone()`. Subsequent changes to a clone do not\naffect the original variable.\n\nMost types in the standard library are marked `Clone`. The example below\ndemonstrates using `clone()` on a string. `s1` is first set to \"many\", and then\ncopied to `s2`. Then the first character of `s1` is removed, without affecting\n`s2`. \"any many\" is printed to the console.\n\n```\nfn main() {\n    let mut s1 = String::from(\"many\");\n    let s2 = s1.clone();\n    s1.remove(0);\n    println!(\"{} {}\", s1, s2);\n}\n```\n\nIf we control the definition of a type, we can implement `Clone` on it ourselves\nwith `#[derive(Clone)]`.\n\nSome types have no ownership semantics at all and are trivial to duplicate. An\nexample is `i32` and the other number types. We don't have to call `.clone()` to\nclone them, because they are marked `Copy` in addition to `Clone`. Implicit\ncloning is more convenient in this case. We can mark our own types `Copy` if\nall their members also are marked `Copy`.\n\nIn the example below, we implement a `Point` type. Because it only stores two\nintegers, we opt-out of ownership semantics with `Copy`. Then we can\n`let p2 = p1` without `p1` being moved.\n\n```\n#[derive(Copy, Clone)]\nstruct Point { x: i32, y: i32 }\n\nfn main() {\n    let mut p1 = Point{ x: -1, y: 2 };\n    let p2 = p1;\n    p1.x = 1;\n    println!(\"p1: {}, {}\", p1.x, p1.y);\n    println!(\"p2: {}, {}\", p2.x, p2.y);\n}\n```\n\nAlternatively, if we don't control the struct's definition, or mutable shared\nownership is truly required, we can use `Rc` and `RefCell`:\n\n```\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = Rc::new(RefCell::new(MyStruct{ s: 5u32 }));\n    let y = x.clone();\n    x.borrow_mut().s = 6;\n    println!(\"{}\", x.borrow().s);\n}\n```\n\nWith this approach, x and y share ownership of the data via the `Rc` (reference\ncount type). `RefCell` essentially performs runtime borrow checking: ensuring\nthat at most one writer or multiple readers can access the data at any one time.\n\nIf you wish to learn more about ownership in Rust, start with the\n[Understanding Ownership][understanding-ownership] chapter in the Book.\n\n[understanding-ownership]: https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":28037,"byte_end":28038,"line_start":967,"line_end":967,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        a,","highlight_start":9,"highlight_end":10}],"label":"value moved here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":28246,"byte_end":28247,"line_start":972,"line_end":972,"column_start":23,"column_end":24,"is_primary":true,"text":[{"text":"    simd_select(m, r, a)","highlight_start":23,"highlight_end":24}],"label":"value used here after move","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":27921,"byte_end":27922,"line_start":964,"line_end":964,"column_start":24,"column_end":25,"is_primary":false,"text":[{"text":"pub unsafe fn vtbx3_s8(a: int8x8_t, b: int8x8x3_t, c: int8x8_t) -> int8x8_t {","highlight_start":24,"highlight_end":25}],"label":"move occurs because `a` has type `arm::neon::int8x8_t`, which does not implement the `Copy` trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider changing this parameter type in function `vqtbx2_s8` to borrow instead if owning the value isn't necessary","code":null,"level":"note","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":35797,"byte_end":35805,"line_start":1249,"line_end":1249,"column_start":8,"column_end":16,"is_primary":true,"text":[{"text":"    a: int8x8_t, t: int8x16x2_t, idx: uint8x8_t,","highlight_start":8,"highlight_end":16}],"label":"this parameter takes ownership of the value","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":35779,"byte_end":35788,"line_start":1248,"line_end":1248,"column_start":15,"column_end":24,"is_primary":false,"text":[{"text":"pub unsafe fn vqtbx2_s8(","highlight_start":15,"highlight_end":24}],"label":"in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"if `arm::neon::int8x8_t` implemented `Clone`, you could clone the value","code":null,"level":"note","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":"consider implementing `Clone` for this type","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":28037,"byte_end":28038,"line_start":967,"line_end":967,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        a,","highlight_start":9,"highlight_end":10}],"label":"you could clone this value","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0382]\u001b[0m\u001b[0m\u001b[1m: use of moved value: `a`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:972:23\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m964\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub unsafe fn vtbx3_s8(a: int8x8_t, b: int8x8x3_t, c: int8x8_t) -> int8x8_t {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmove occurs because `a` has type `arm::neon::int8x8_t`, which does not implement the `Copy` trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m967\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        a,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mvalue moved here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m972\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    simd_select(m, r, a)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mvalue used here after move\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: consider changing this parameter type in function `vqtbx2_s8` to borrow instead if owning the value isn't necessary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:1249:8\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1248\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub unsafe fn vqtbx2_s8(\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1249\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    a: int8x8_t, t: int8x16x2_t, idx: uint8x8_t,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis parameter takes ownership of the value\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: if `arm::neon::int8x8_t` implemented `Clone`, you could clone the value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mconsider implementing `Clone` for this type\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:967:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m967\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        a,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12myou could clone this value\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of moved value: `c`","code":{"code":"E0382","explanation":"A variable was used after its contents have been moved elsewhere.\n\nErroneous code example:\n\n```compile_fail,E0382\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = MyStruct{ s: 5u32 };\n    let y = x;\n    x.s = 6;\n    println!(\"{}\", x.s);\n}\n```\n\nSince `MyStruct` is a type that is not marked `Copy`, the data gets moved out\nof `x` when we set `y`. This is fundamental to Rust's ownership system: outside\nof workarounds like `Rc`, a value cannot be owned by more than one variable.\n\nSometimes we don't need to move the value. Using a reference, we can let another\nfunction borrow the value without changing its ownership. In the example below,\nwe don't actually have to move our string to `calculate_length`, we can give it\na reference to it with `&` instead.\n\n```\nfn main() {\n    let s1 = String::from(\"hello\");\n\n    let len = calculate_length(&s1);\n\n    println!(\"The length of '{}' is {}.\", s1, len);\n}\n\nfn calculate_length(s: &String) -> usize {\n    s.len()\n}\n```\n\nA mutable reference can be created with `&mut`.\n\nSometimes we don't want a reference, but a duplicate. All types marked `Clone`\ncan be duplicated by calling `.clone()`. Subsequent changes to a clone do not\naffect the original variable.\n\nMost types in the standard library are marked `Clone`. The example below\ndemonstrates using `clone()` on a string. `s1` is first set to \"many\", and then\ncopied to `s2`. Then the first character of `s1` is removed, without affecting\n`s2`. \"any many\" is printed to the console.\n\n```\nfn main() {\n    let mut s1 = String::from(\"many\");\n    let s2 = s1.clone();\n    s1.remove(0);\n    println!(\"{} {}\", s1, s2);\n}\n```\n\nIf we control the definition of a type, we can implement `Clone` on it ourselves\nwith `#[derive(Clone)]`.\n\nSome types have no ownership semantics at all and are trivial to duplicate. An\nexample is `i32` and the other number types. We don't have to call `.clone()` to\nclone them, because they are marked `Copy` in addition to `Clone`. Implicit\ncloning is more convenient in this case. We can mark our own types `Copy` if\nall their members also are marked `Copy`.\n\nIn the example below, we implement a `Point` type. Because it only stores two\nintegers, we opt-out of ownership semantics with `Copy`. Then we can\n`let p2 = p1` without `p1` being moved.\n\n```\n#[derive(Copy, Clone)]\nstruct Point { x: i32, y: i32 }\n\nfn main() {\n    let mut p1 = Point{ x: -1, y: 2 };\n    let p2 = p1;\n    p1.x = 1;\n    println!(\"p1: {}, {}\", p1.x, p1.y);\n    println!(\"p2: {}, {}\", p2.x, p2.y);\n}\n```\n\nAlternatively, if we don't control the struct's definition, or mutable shared\nownership is truly required, we can use `Rc` and `RefCell`:\n\n```\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = Rc::new(RefCell::new(MyStruct{ s: 5u32 }));\n    let y = x.clone();\n    x.borrow_mut().s = 6;\n    println!(\"{}\", x.borrow().s);\n}\n```\n\nWith this approach, x and y share ownership of the data via the `Rc` (reference\ncount type). `RefCell` essentially performs runtime borrow checking: ensuring\nthat at most one writer or multiple readers can access the data at any one time.\n\nIf you wish to learn more about ownership in Rust, start with the\n[Understanding Ownership][understanding-ownership] chapter in the Book.\n\n[understanding-ownership]: https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":28635,"byte_end":28636,"line_start":987,"line_end":987,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        c,","highlight_start":9,"highlight_end":10}],"label":"value moved here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":28675,"byte_end":28676,"line_start":989,"line_end":989,"column_start":31,"column_end":32,"is_primary":true,"text":[{"text":"    let m: int8x8_t = simd_lt(c, ::mem::transmute(u8x8::splat(24)));","highlight_start":31,"highlight_end":32}],"label":"value used here after move","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":28452,"byte_end":28453,"line_start":981,"line_end":981,"column_start":35,"column_end":36,"is_primary":false,"text":[{"text":"    a: uint8x8_t, b: uint8x8x3_t, c: uint8x8_t,","highlight_start":35,"highlight_end":36}],"label":"move occurs because `c` has type `arm::neon::uint8x8_t`, which does not implement the `Copy` trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider changing this parameter type in function `vqtbx2_u8` to borrow instead if owning the value isn't necessary","code":null,"level":"note","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":36361,"byte_end":36370,"line_start":1269,"line_end":1269,"column_start":41,"column_end":50,"is_primary":true,"text":[{"text":"    a: uint8x8_t, t: uint8x16x2_t, idx: uint8x8_t,","highlight_start":41,"highlight_end":50}],"label":"this parameter takes ownership of the value","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":36310,"byte_end":36319,"line_start":1268,"line_end":1268,"column_start":15,"column_end":24,"is_primary":false,"text":[{"text":"pub unsafe fn vqtbx2_u8(","highlight_start":15,"highlight_end":24}],"label":"in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"if `arm::neon::uint8x8_t` implemented `Clone`, you could clone the value","code":null,"level":"note","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":"consider implementing `Clone` for this type","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":28635,"byte_end":28636,"line_start":987,"line_end":987,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        c,","highlight_start":9,"highlight_end":10}],"label":"you could clone this value","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0382]\u001b[0m\u001b[0m\u001b[1m: use of moved value: `c`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:989:31\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m981\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    a: uint8x8_t, b: uint8x8x3_t, c: uint8x8_t,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmove occurs because `c` has type `arm::neon::uint8x8_t`, which does not implement the `Copy` trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m987\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        c,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mvalue moved here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m988\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m989\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let m: int8x8_t = simd_lt(c, ::mem::transmute(u8x8::splat(24)));\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mvalue used here after move\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: consider changing this parameter type in function `vqtbx2_u8` to borrow instead if owning the value isn't necessary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:1269:41\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1268\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub unsafe fn vqtbx2_u8(\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1269\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    a: uint8x8_t, t: uint8x16x2_t, idx: uint8x8_t,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis parameter takes ownership of the value\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: if `arm::neon::uint8x8_t` implemented `Clone`, you could clone the value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mconsider implementing `Clone` for this type\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:987:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m987\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        c,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12myou could clone this value\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of moved value: `a`","code":{"code":"E0382","explanation":"A variable was used after its contents have been moved elsewhere.\n\nErroneous code example:\n\n```compile_fail,E0382\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = MyStruct{ s: 5u32 };\n    let y = x;\n    x.s = 6;\n    println!(\"{}\", x.s);\n}\n```\n\nSince `MyStruct` is a type that is not marked `Copy`, the data gets moved out\nof `x` when we set `y`. This is fundamental to Rust's ownership system: outside\nof workarounds like `Rc`, a value cannot be owned by more than one variable.\n\nSometimes we don't need to move the value. Using a reference, we can let another\nfunction borrow the value without changing its ownership. In the example below,\nwe don't actually have to move our string to `calculate_length`, we can give it\na reference to it with `&` instead.\n\n```\nfn main() {\n    let s1 = String::from(\"hello\");\n\n    let len = calculate_length(&s1);\n\n    println!(\"The length of '{}' is {}.\", s1, len);\n}\n\nfn calculate_length(s: &String) -> usize {\n    s.len()\n}\n```\n\nA mutable reference can be created with `&mut`.\n\nSometimes we don't want a reference, but a duplicate. All types marked `Clone`\ncan be duplicated by calling `.clone()`. Subsequent changes to a clone do not\naffect the original variable.\n\nMost types in the standard library are marked `Clone`. The example below\ndemonstrates using `clone()` on a string. `s1` is first set to \"many\", and then\ncopied to `s2`. Then the first character of `s1` is removed, without affecting\n`s2`. \"any many\" is printed to the console.\n\n```\nfn main() {\n    let mut s1 = String::from(\"many\");\n    let s2 = s1.clone();\n    s1.remove(0);\n    println!(\"{} {}\", s1, s2);\n}\n```\n\nIf we control the definition of a type, we can implement `Clone` on it ourselves\nwith `#[derive(Clone)]`.\n\nSome types have no ownership semantics at all and are trivial to duplicate. An\nexample is `i32` and the other number types. We don't have to call `.clone()` to\nclone them, because they are marked `Copy` in addition to `Clone`. Implicit\ncloning is more convenient in this case. We can mark our own types `Copy` if\nall their members also are marked `Copy`.\n\nIn the example below, we implement a `Point` type. Because it only stores two\nintegers, we opt-out of ownership semantics with `Copy`. Then we can\n`let p2 = p1` without `p1` being moved.\n\n```\n#[derive(Copy, Clone)]\nstruct Point { x: i32, y: i32 }\n\nfn main() {\n    let mut p1 = Point{ x: -1, y: 2 };\n    let p2 = p1;\n    p1.x = 1;\n    println!(\"p1: {}, {}\", p1.x, p1.y);\n    println!(\"p2: {}, {}\", p2.x, p2.y);\n}\n```\n\nAlternatively, if we don't control the struct's definition, or mutable shared\nownership is truly required, we can use `Rc` and `RefCell`:\n\n```\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = Rc::new(RefCell::new(MyStruct{ s: 5u32 }));\n    let y = x.clone();\n    x.borrow_mut().s = 6;\n    println!(\"{}\", x.borrow().s);\n}\n```\n\nWith this approach, x and y share ownership of the data via the `Rc` (reference\ncount type). `RefCell` essentially performs runtime borrow checking: ensuring\nthat at most one writer or multiple readers can access the data at any one time.\n\nIf you wish to learn more about ownership in Rust, start with the\n[Understanding Ownership][understanding-ownership] chapter in the Book.\n\n[understanding-ownership]: https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":28544,"byte_end":28545,"line_start":985,"line_end":985,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        a,","highlight_start":9,"highlight_end":10}],"label":"value moved here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":28736,"byte_end":28737,"line_start":990,"line_end":990,"column_start":23,"column_end":24,"is_primary":true,"text":[{"text":"    simd_select(m, r, a)","highlight_start":23,"highlight_end":24}],"label":"value used here after move","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":28422,"byte_end":28423,"line_start":981,"line_end":981,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    a: uint8x8_t, b: uint8x8x3_t, c: uint8x8_t,","highlight_start":5,"highlight_end":6}],"label":"move occurs because `a` has type `arm::neon::uint8x8_t`, which does not implement the `Copy` trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider changing this parameter type in function `vqtbx2_u8` to borrow instead if owning the value isn't necessary","code":null,"level":"note","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":36328,"byte_end":36337,"line_start":1269,"line_end":1269,"column_start":8,"column_end":17,"is_primary":true,"text":[{"text":"    a: uint8x8_t, t: uint8x16x2_t, idx: uint8x8_t,","highlight_start":8,"highlight_end":17}],"label":"this parameter takes ownership of the value","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":36310,"byte_end":36319,"line_start":1268,"line_end":1268,"column_start":15,"column_end":24,"is_primary":false,"text":[{"text":"pub unsafe fn vqtbx2_u8(","highlight_start":15,"highlight_end":24}],"label":"in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"if `arm::neon::uint8x8_t` implemented `Clone`, you could clone the value","code":null,"level":"note","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":"consider implementing `Clone` for this type","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":28544,"byte_end":28545,"line_start":985,"line_end":985,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        a,","highlight_start":9,"highlight_end":10}],"label":"you could clone this value","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0382]\u001b[0m\u001b[0m\u001b[1m: use of moved value: `a`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:990:23\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m981\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    a: uint8x8_t, b: uint8x8x3_t, c: uint8x8_t,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmove occurs because `a` has type `arm::neon::uint8x8_t`, which does not implement the `Copy` trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m985\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        a,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mvalue moved here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m990\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    simd_select(m, r, a)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mvalue used here after move\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: consider changing this parameter type in function `vqtbx2_u8` to borrow instead if owning the value isn't necessary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:1269:8\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1268\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub unsafe fn vqtbx2_u8(\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1269\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    a: uint8x8_t, t: uint8x16x2_t, idx: uint8x8_t,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis parameter takes ownership of the value\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: if `arm::neon::uint8x8_t` implemented `Clone`, you could clone the value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mconsider implementing `Clone` for this type\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:985:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m985\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        a,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12myou could clone this value\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of moved value: `c`","code":{"code":"E0382","explanation":"A variable was used after its contents have been moved elsewhere.\n\nErroneous code example:\n\n```compile_fail,E0382\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = MyStruct{ s: 5u32 };\n    let y = x;\n    x.s = 6;\n    println!(\"{}\", x.s);\n}\n```\n\nSince `MyStruct` is a type that is not marked `Copy`, the data gets moved out\nof `x` when we set `y`. This is fundamental to Rust's ownership system: outside\nof workarounds like `Rc`, a value cannot be owned by more than one variable.\n\nSometimes we don't need to move the value. Using a reference, we can let another\nfunction borrow the value without changing its ownership. In the example below,\nwe don't actually have to move our string to `calculate_length`, we can give it\na reference to it with `&` instead.\n\n```\nfn main() {\n    let s1 = String::from(\"hello\");\n\n    let len = calculate_length(&s1);\n\n    println!(\"The length of '{}' is {}.\", s1, len);\n}\n\nfn calculate_length(s: &String) -> usize {\n    s.len()\n}\n```\n\nA mutable reference can be created with `&mut`.\n\nSometimes we don't want a reference, but a duplicate. All types marked `Clone`\ncan be duplicated by calling `.clone()`. Subsequent changes to a clone do not\naffect the original variable.\n\nMost types in the standard library are marked `Clone`. The example below\ndemonstrates using `clone()` on a string. `s1` is first set to \"many\", and then\ncopied to `s2`. Then the first character of `s1` is removed, without affecting\n`s2`. \"any many\" is printed to the console.\n\n```\nfn main() {\n    let mut s1 = String::from(\"many\");\n    let s2 = s1.clone();\n    s1.remove(0);\n    println!(\"{} {}\", s1, s2);\n}\n```\n\nIf we control the definition of a type, we can implement `Clone` on it ourselves\nwith `#[derive(Clone)]`.\n\nSome types have no ownership semantics at all and are trivial to duplicate. An\nexample is `i32` and the other number types. We don't have to call `.clone()` to\nclone them, because they are marked `Copy` in addition to `Clone`. Implicit\ncloning is more convenient in this case. We can mark our own types `Copy` if\nall their members also are marked `Copy`.\n\nIn the example below, we implement a `Point` type. Because it only stores two\nintegers, we opt-out of ownership semantics with `Copy`. Then we can\n`let p2 = p1` without `p1` being moved.\n\n```\n#[derive(Copy, Clone)]\nstruct Point { x: i32, y: i32 }\n\nfn main() {\n    let mut p1 = Point{ x: -1, y: 2 };\n    let p2 = p1;\n    p1.x = 1;\n    println!(\"p1: {}, {}\", p1.x, p1.y);\n    println!(\"p2: {}, {}\", p2.x, p2.y);\n}\n```\n\nAlternatively, if we don't control the struct's definition, or mutable shared\nownership is truly required, we can use `Rc` and `RefCell`:\n\n```\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = Rc::new(RefCell::new(MyStruct{ s: 5u32 }));\n    let y = x.clone();\n    x.borrow_mut().s = 6;\n    println!(\"{}\", x.borrow().s);\n}\n```\n\nWith this approach, x and y share ownership of the data via the `Rc` (reference\ncount type). `RefCell` essentially performs runtime borrow checking: ensuring\nthat at most one writer or multiple readers can access the data at any one time.\n\nIf you wish to learn more about ownership in Rust, start with the\n[Understanding Ownership][understanding-ownership] chapter in the Book.\n\n[understanding-ownership]: https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":29125,"byte_end":29126,"line_start":1005,"line_end":1005,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        c,","highlight_start":9,"highlight_end":10}],"label":"value moved here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":29165,"byte_end":29166,"line_start":1007,"line_end":1007,"column_start":31,"column_end":32,"is_primary":true,"text":[{"text":"    let m: int8x8_t = simd_lt(c, ::mem::transmute(u8x8::splat(24)));","highlight_start":31,"highlight_end":32}],"label":"value used here after move","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":28942,"byte_end":28943,"line_start":999,"line_end":999,"column_start":35,"column_end":36,"is_primary":false,"text":[{"text":"    a: poly8x8_t, b: poly8x8x3_t, c: uint8x8_t,","highlight_start":35,"highlight_end":36}],"label":"move occurs because `c` has type `arm::neon::uint8x8_t`, which does not implement the `Copy` trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider changing this parameter type in function `vqtbx2_p8` to borrow instead if owning the value isn't necessary","code":null,"level":"note","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":37156,"byte_end":37165,"line_start":1299,"line_end":1299,"column_start":41,"column_end":50,"is_primary":true,"text":[{"text":"    a: poly8x8_t, t: poly8x16x2_t, idx: uint8x8_t,","highlight_start":41,"highlight_end":50}],"label":"this parameter takes ownership of the value","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":37105,"byte_end":37114,"line_start":1298,"line_end":1298,"column_start":15,"column_end":24,"is_primary":false,"text":[{"text":"pub unsafe fn vqtbx2_p8(","highlight_start":15,"highlight_end":24}],"label":"in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"if `arm::neon::uint8x8_t` implemented `Clone`, you could clone the value","code":null,"level":"note","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":"consider implementing `Clone` for this type","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":29125,"byte_end":29126,"line_start":1005,"line_end":1005,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        c,","highlight_start":9,"highlight_end":10}],"label":"you could clone this value","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0382]\u001b[0m\u001b[0m\u001b[1m: use of moved value: `c`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:1007:31\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m999\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    a: poly8x8_t, b: poly8x8x3_t, c: uint8x8_t,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmove occurs because `c` has type `arm::neon::uint8x8_t`, which does not implement the `Copy` trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1005\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        c,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mvalue moved here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1006\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1007\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let m: int8x8_t = simd_lt(c, ::mem::transmute(u8x8::splat(24)));\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mvalue used here after move\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: consider changing this parameter type in function `vqtbx2_p8` to borrow instead if owning the value isn't necessary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:1299:41\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1298\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub unsafe fn vqtbx2_p8(\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1299\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    a: poly8x8_t, t: poly8x16x2_t, idx: uint8x8_t,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis parameter takes ownership of the value\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: if `arm::neon::uint8x8_t` implemented `Clone`, you could clone the value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mconsider implementing `Clone` for this type\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:1005:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1005\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        c,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12myou could clone this value\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of moved value: `a`","code":{"code":"E0382","explanation":"A variable was used after its contents have been moved elsewhere.\n\nErroneous code example:\n\n```compile_fail,E0382\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = MyStruct{ s: 5u32 };\n    let y = x;\n    x.s = 6;\n    println!(\"{}\", x.s);\n}\n```\n\nSince `MyStruct` is a type that is not marked `Copy`, the data gets moved out\nof `x` when we set `y`. This is fundamental to Rust's ownership system: outside\nof workarounds like `Rc`, a value cannot be owned by more than one variable.\n\nSometimes we don't need to move the value. Using a reference, we can let another\nfunction borrow the value without changing its ownership. In the example below,\nwe don't actually have to move our string to `calculate_length`, we can give it\na reference to it with `&` instead.\n\n```\nfn main() {\n    let s1 = String::from(\"hello\");\n\n    let len = calculate_length(&s1);\n\n    println!(\"The length of '{}' is {}.\", s1, len);\n}\n\nfn calculate_length(s: &String) -> usize {\n    s.len()\n}\n```\n\nA mutable reference can be created with `&mut`.\n\nSometimes we don't want a reference, but a duplicate. All types marked `Clone`\ncan be duplicated by calling `.clone()`. Subsequent changes to a clone do not\naffect the original variable.\n\nMost types in the standard library are marked `Clone`. The example below\ndemonstrates using `clone()` on a string. `s1` is first set to \"many\", and then\ncopied to `s2`. Then the first character of `s1` is removed, without affecting\n`s2`. \"any many\" is printed to the console.\n\n```\nfn main() {\n    let mut s1 = String::from(\"many\");\n    let s2 = s1.clone();\n    s1.remove(0);\n    println!(\"{} {}\", s1, s2);\n}\n```\n\nIf we control the definition of a type, we can implement `Clone` on it ourselves\nwith `#[derive(Clone)]`.\n\nSome types have no ownership semantics at all and are trivial to duplicate. An\nexample is `i32` and the other number types. We don't have to call `.clone()` to\nclone them, because they are marked `Copy` in addition to `Clone`. Implicit\ncloning is more convenient in this case. We can mark our own types `Copy` if\nall their members also are marked `Copy`.\n\nIn the example below, we implement a `Point` type. Because it only stores two\nintegers, we opt-out of ownership semantics with `Copy`. Then we can\n`let p2 = p1` without `p1` being moved.\n\n```\n#[derive(Copy, Clone)]\nstruct Point { x: i32, y: i32 }\n\nfn main() {\n    let mut p1 = Point{ x: -1, y: 2 };\n    let p2 = p1;\n    p1.x = 1;\n    println!(\"p1: {}, {}\", p1.x, p1.y);\n    println!(\"p2: {}, {}\", p2.x, p2.y);\n}\n```\n\nAlternatively, if we don't control the struct's definition, or mutable shared\nownership is truly required, we can use `Rc` and `RefCell`:\n\n```\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = Rc::new(RefCell::new(MyStruct{ s: 5u32 }));\n    let y = x.clone();\n    x.borrow_mut().s = 6;\n    println!(\"{}\", x.borrow().s);\n}\n```\n\nWith this approach, x and y share ownership of the data via the `Rc` (reference\ncount type). `RefCell` essentially performs runtime borrow checking: ensuring\nthat at most one writer or multiple readers can access the data at any one time.\n\nIf you wish to learn more about ownership in Rust, start with the\n[Understanding Ownership][understanding-ownership] chapter in the Book.\n\n[understanding-ownership]: https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html\n"},"level":"error","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":29034,"byte_end":29035,"line_start":1003,"line_end":1003,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        a,","highlight_start":9,"highlight_end":10}],"label":"value moved here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":29226,"byte_end":29227,"line_start":1008,"line_end":1008,"column_start":23,"column_end":24,"is_primary":true,"text":[{"text":"    simd_select(m, r, a)","highlight_start":23,"highlight_end":24}],"label":"value used here after move","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":28912,"byte_end":28913,"line_start":999,"line_end":999,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    a: poly8x8_t, b: poly8x8x3_t, c: uint8x8_t,","highlight_start":5,"highlight_end":6}],"label":"move occurs because `a` has type `arm::neon::poly8x8_t`, which does not implement the `Copy` trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider changing this parameter type in function `vqtbx2_p8` to borrow instead if owning the value isn't necessary","code":null,"level":"note","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":37123,"byte_end":37132,"line_start":1299,"line_end":1299,"column_start":8,"column_end":17,"is_primary":true,"text":[{"text":"    a: poly8x8_t, t: poly8x16x2_t, idx: uint8x8_t,","highlight_start":8,"highlight_end":17}],"label":"this parameter takes ownership of the value","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":37105,"byte_end":37114,"line_start":1298,"line_end":1298,"column_start":15,"column_end":24,"is_primary":false,"text":[{"text":"pub unsafe fn vqtbx2_p8(","highlight_start":15,"highlight_end":24}],"label":"in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"if `arm::neon::poly8x8_t` implemented `Clone`, you could clone the value","code":null,"level":"note","spans":[{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":282,"byte_end":312,"line_start":13,"line_end":13,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        pub struct $name($($fields)*);","highlight_start":9,"highlight_end":39}],"label":"consider implementing `Clone` for this type","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs","byte_start":101,"byte_end":2996,"line_start":7,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"types! {","highlight_start":1,"highlight_end":9},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `i8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);","highlight_start":1,"highlight_end":57},{"text":"    /// ARM-specific 64-bit wide vector of eight packed `u8`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide polynomial vector of eight packed `u8`.","highlight_start":1,"highlight_end":73},{"text":"    pub struct poly8x8_t(u8, u8, u8, u8, u8, u8, u8, u8);","highlight_start":1,"highlight_end":58},{"text":"    /// ARM-specific 64-bit wide vector of four packed `i16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int16x4_t(i16, i16, i16, i16);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    // FIXME: ARM-specific 64-bit wide vector of four packed `f16`.","highlight_start":1,"highlight_end":68},{"text":"    // pub struct float16x4_t(f16, f16, f16, f16);","highlight_start":1,"highlight_end":51},{"text":"    /// ARM-specific 64-bit wide vector of four packed `u16`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct poly16x4_t(u16, u16, u16, u16);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 64-bit wide vector of two packed `i32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int32x2_t(i32, i32);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 64-bit wide vector of two packed `u32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint32x2_t(u32, u32);","highlight_start":1,"highlight_end":37},{"text":"    /// ARM-specific 64-bit wide vector of two packed `f32`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct float32x2_t(f32, f32);","highlight_start":1,"highlight_end":38},{"text":"    /// ARM-specific 64-bit wide vector of one packed `i64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct int64x1_t(i64);","highlight_start":1,"highlight_end":31},{"text":"    /// ARM-specific 64-bit wide vector of one packed `u64`.","highlight_start":1,"highlight_end":61},{"text":"    pub struct uint64x1_t(u64);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `i8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct int8x16_t(","highlight_start":1,"highlight_end":26},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"        i8, i8 ,i8, i8, i8, i8 ,i8, i8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct uint8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8 ,u8, u8, u8, u8 ,u8, u8,","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of sixteen packed `u8`.","highlight_start":1,"highlight_end":65},{"text":"    pub struct poly8x16_t(","highlight_start":1,"highlight_end":27},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8,","highlight_start":1,"highlight_end":40},{"text":"        u8, u8, u8, u8, u8, u8, u8, u8","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `i16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct int16x8_t(i16, i16, i16, i16, i16, i16, i16, i16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct uint16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    // FIXME: ARM-specific 128-bit wide vector of eight packed `f16`.","highlight_start":1,"highlight_end":70},{"text":"    // pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);","highlight_start":1,"highlight_end":66},{"text":"    /// ARM-specific 128-bit wide vector of eight packed `u16`.","highlight_start":1,"highlight_end":64},{"text":"    pub struct poly16x8_t(u16, u16, u16, u16, u16, u16, u16, u16);","highlight_start":1,"highlight_end":67},{"text":"    /// ARM-specific 128-bit wide vector of four packed `i32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct int32x4_t(i32, i32, i32, i32);","highlight_start":1,"highlight_end":46},{"text":"    /// ARM-specific 128-bit wide vector of four packed `u32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct uint32x4_t(u32, u32, u32, u32);","highlight_start":1,"highlight_end":47},{"text":"    /// ARM-specific 128-bit wide vector of four packed `f32`.","highlight_start":1,"highlight_end":63},{"text":"    pub struct float32x4_t(f32, f32, f32, f32);","highlight_start":1,"highlight_end":48},{"text":"    /// ARM-specific 128-bit wide vector of two packed `i64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct int64x2_t(i64, i64);","highlight_start":1,"highlight_end":36},{"text":"    /// ARM-specific 128-bit wide vector of two packed `u64`.","highlight_start":1,"highlight_end":62},{"text":"    pub struct uint64x2_t(u64, u64);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"types!","def_site_span":{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs","byte_start":38,"byte_end":56,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! types {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs","byte_start":29034,"byte_end":29035,"line_start":1003,"line_end":1003,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        a,","highlight_start":9,"highlight_end":10}],"label":"you could clone this value","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0382]\u001b[0m\u001b[0m\u001b[1m: use of moved value: `a`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:1008:23\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m999\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    a: poly8x8_t, b: poly8x8x3_t, c: uint8x8_t,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmove occurs because `a` has type `arm::neon::poly8x8_t`, which does not implement the `Copy` trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1003\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        a,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mvalue moved here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1008\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    simd_select(m, r, a)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mvalue used here after move\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: consider changing this parameter type in function `vqtbx2_p8` to borrow instead if owning the value isn't necessary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:1299:8\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1298\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub unsafe fn vqtbx2_p8(\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1299\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    a: poly8x8_t, t: poly8x16x2_t, idx: uint8x8_t,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis parameter takes ownership of the value\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: if `arm::neon::poly8x8_t` implemented `Clone`, you could clone the value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/macros.rs:13:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $name($($fields)*);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mconsider implementing `Clone` for this type\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/aarch64/neon.rs:1003:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1003\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        a,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12myou could clone this value\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srikar/.cargo/registry/src/index.crates.io-6f17d22bba15001f/coresimd-0.1.2/src/coresimd/arm/neon.rs:7:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mtypes! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `i8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct int8x8_t(i8, i8, i8, i8, i8, i8, i8, i8);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ARM-specific 64-bit wide vector of eight packed `u8`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct uint64x2_t(u64, u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `types` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 195 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 195 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0044, E0076, E0382, E0554, E0557, E0635, E0703.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0044, E0076, E0382, E0554, E0557, E0635, E0703.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0044`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0044`.\u001b[0m\n"}
